From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Space Walker <spacedoesrs@gmail.com>
Date: Thu, 8 Sep 2022 17:41:05 +0200
Subject: [PATCH] integrate nester


diff --git a/build.gradle b/build.gradle
index 8ae381b8d82ae99ae76971128f4a53f726bad7b2..a4b8055f19082279c4fe9dd47cac8f13b67f7a75 100644
--- a/build.gradle
+++ b/build.gradle
@@ -103,6 +103,9 @@ dependencies {
 	// source code remapping
 	implementation ('net.fabricmc:mercury:0.2.6')
 
+	// nested class fixing
+	implementation 'net.ornithemc:nester:0.2.5'
+
 	// Kotlin
 	implementation('org.jetbrains.kotlinx:kotlinx-metadata-jvm:0.4.2') {
 		transitive = false
diff --git a/src/main/java/net/fabricmc/loom/api/mappings/intermediate/IntermediateMappingsProvider.java b/src/main/java/net/fabricmc/loom/api/mappings/intermediate/IntermediateMappingsProvider.java
index dd871134dd0cd9f83b6bed75f02930de216e99a4..06aae73005c27124014d53e0ac135a75604c9c7d 100644
--- a/src/main/java/net/fabricmc/loom/api/mappings/intermediate/IntermediateMappingsProvider.java
+++ b/src/main/java/net/fabricmc/loom/api/mappings/intermediate/IntermediateMappingsProvider.java
@@ -45,8 +45,9 @@ public abstract class IntermediateMappingsProvider implements Named {
 	public abstract Property<Function<String, DownloadBuilder>> getDownloader();
 
 	/**
-	 * Generate or download a tinyv2 mapping file with calamus and named namespaces.
+	 * Generate or download a tinyv2 mapping file with calamus and named namespaces,
+	 * as well as mappings used by Nester.
 	 * @throws IOException
 	 */
-	public abstract void provide(Path tinyMappings) throws IOException;
+	public abstract void provide(Path tinyMappings, Path nestMappings) throws IOException;
 }
diff --git a/src/main/java/net/fabricmc/loom/configuration/CompileConfiguration.java b/src/main/java/net/fabricmc/loom/configuration/CompileConfiguration.java
index 06816f3e2eb3da9255f7047ee59b2d680897bf2b..6589ec6f1519c877f59150f54ac8493b1f3da958 100644
--- a/src/main/java/net/fabricmc/loom/configuration/CompileConfiguration.java
+++ b/src/main/java/net/fabricmc/loom/configuration/CompileConfiguration.java
@@ -192,6 +192,8 @@ public final class CompileConfiguration {
 		extension.setMappingsProvider(mappingsProvider);
 		mappingsProvider.applyToProject(project, mappingsDep);
 
+		minecraftProvider.patchJars();
+
 		// Provide the remapped mc jars
 		final CalamusMinecraftProvider<?> calamusMinecraftProvider = jarConfiguration.getCalamusMinecraftProviderBiFunction().apply(project, minecraftProvider);
 		NamedMinecraftProvider<?> namedMinecraftProvider = jarConfiguration.getNamedMinecraftProviderBiFunction().apply(project, minecraftProvider);
diff --git a/src/main/java/net/fabricmc/loom/configuration/providers/mappings/CalamusMappingsProvider.java b/src/main/java/net/fabricmc/loom/configuration/providers/mappings/CalamusMappingsProvider.java
index d5f5e431a5b194326e3a4aa74a00d6e087381b4b..0b6c1c0f7876df3d6e55669da00af0a3c5106496 100644
--- a/src/main/java/net/fabricmc/loom/configuration/providers/mappings/CalamusMappingsProvider.java
+++ b/src/main/java/net/fabricmc/loom/configuration/providers/mappings/CalamusMappingsProvider.java
@@ -44,8 +44,8 @@ public abstract class CalamusMappingsProvider extends IntermediateMappingsProvid
 	public abstract Property<Boolean> getRefreshDeps();
 
 	@Override
-	public void provide(Path tinyMappings) throws IOException {
-		if (Files.exists(tinyMappings) && !getRefreshDeps().get()) {
+	public void provide(Path tinyMappings, Path nestMappings) throws IOException {
+		if (Files.exists(tinyMappings) && Files.exists(nestMappings) && !getRefreshDeps().get()) {
 			return;
 		}
 
@@ -57,6 +57,7 @@ public abstract class CalamusMappingsProvider extends IntermediateMappingsProvid
 		LOGGER.info("Downloading calamus from {}", url);
 
 		Files.deleteIfExists(tinyMappings);
+		Files.deleteIfExists(nestMappings);
 		Files.deleteIfExists(calamusJarPath);
 
 		getDownloader().get().apply(url)
@@ -64,6 +65,7 @@ public abstract class CalamusMappingsProvider extends IntermediateMappingsProvid
 				.downloadPath(calamusJarPath);
 
 		MappingsProviderImpl.extractMappings(calamusJarPath, tinyMappings);
+		MappingsProviderImpl.extractNests(calamusJarPath, nestMappings);
 	}
 
 	@Override
diff --git a/src/main/java/net/fabricmc/loom/configuration/providers/mappings/IntermediateMappingsService.java b/src/main/java/net/fabricmc/loom/configuration/providers/mappings/IntermediateMappingsService.java
index fa46c0f54da5a24111515e0b09be23a2d6a93349..ba31b3d4611545f3986195cf7ad9025fd9bb6b73 100644
--- a/src/main/java/net/fabricmc/loom/configuration/providers/mappings/IntermediateMappingsService.java
+++ b/src/main/java/net/fabricmc/loom/configuration/providers/mappings/IntermediateMappingsService.java
@@ -48,12 +48,17 @@ import net.fabricmc.mappingio.adapter.MappingNsCompleter;
 import net.fabricmc.mappingio.format.Tiny2Reader;
 import net.fabricmc.mappingio.tree.MemoryMappingTree;
 
+import net.ornithemc.nester.mapping.Nests;
+
 public final class IntermediateMappingsService implements SharedService {
 	private final Path calamusTiny;
 	private final Supplier<MemoryMappingTree> memoryMappingTree = Suppliers.memoize(this::createMemoryMappingTree);
+	private final Path calamusNest;
+	private final Supplier<Nests> nests = Suppliers.memoize(this::createNests);
 
-	private IntermediateMappingsService(Path calamusTiny) {
+	private IntermediateMappingsService(Path calamusTiny, Path calamusNest) {
 		this.calamusTiny = calamusTiny;
+		this.calamusNest = calamusNest;
 	}
 
 	public static synchronized IntermediateMappingsService getInstance(Project project, MinecraftProvider minecraftProvider) {
@@ -67,12 +72,14 @@ public final class IntermediateMappingsService implements SharedService {
 	@VisibleForTesting
 	public static IntermediateMappingsService create(IntermediateMappingsProvider intermediateMappingsProvider, MinecraftProvider minecraftProvider) {
 		final Path calamusTiny = minecraftProvider.file(intermediateMappingsProvider.getName() + ".tiny").toPath();
+		final Path calamusNest = minecraftProvider.file(intermediateMappingsProvider.getName() + ".nest").toPath();
 
 		try {
-			intermediateMappingsProvider.provide(calamusTiny);
+			intermediateMappingsProvider.provide(calamusTiny, calamusNest);
 		} catch (IOException e) {
 			try {
 				Files.deleteIfExists(calamusTiny);
+				Files.deleteIfExists(calamusNest);
 			} catch (IOException ex) {
 				ex.printStackTrace();
 			}
@@ -80,7 +87,7 @@ public final class IntermediateMappingsService implements SharedService {
 			throw new UncheckedIOException("Failed to provide intermediate mappings", e);
 		}
 
-		return new IntermediateMappingsService(calamusTiny);
+		return new IntermediateMappingsService(calamusTiny, calamusNest);
 	}
 
 	private MemoryMappingTree createMemoryMappingTree() {
@@ -99,6 +106,10 @@ public final class IntermediateMappingsService implements SharedService {
 		return tree;
 	}
 
+	private Nests createNests() {
+		return Nests.of(calamusNest);
+	}
+
 	public MemoryMappingTree getMemoryMappingTree() {
 		return memoryMappingTree.get();
 	}
@@ -106,4 +117,12 @@ public final class IntermediateMappingsService implements SharedService {
 	public Path getCalamusTiny() {
 		return Objects.requireNonNull(calamusTiny, "Calamus mappings have not been setup");
 	}
+
+	public Nests getNests() {
+		return nests.get();
+	}
+
+	public Path getCalamusNest() {
+		return calamusNest;
+	}
 }
diff --git a/src/main/java/net/fabricmc/loom/configuration/providers/mappings/MappingsProvider.java b/src/main/java/net/fabricmc/loom/configuration/providers/mappings/MappingsProvider.java
index cd451415af326969b7b09ac73aa2e70070263fbe..14224ffb8cf37553273ebf6aa9faf6ac73b16271 100644
--- a/src/main/java/net/fabricmc/loom/configuration/providers/mappings/MappingsProvider.java
+++ b/src/main/java/net/fabricmc/loom/configuration/providers/mappings/MappingsProvider.java
@@ -31,4 +31,6 @@ public interface MappingsProvider {
 	Path mappingsWorkingDir();
 
 	File calamusTinyFile();
+
+	File calamusNestFile();
 }
diff --git a/src/main/java/net/fabricmc/loom/configuration/providers/mappings/MappingsProviderImpl.java b/src/main/java/net/fabricmc/loom/configuration/providers/mappings/MappingsProviderImpl.java
index f5ae9be6944b9d11bbab30f084ab6880971fdb2b..977b948a21f63eebc3db4eaf0f6f816aac204ea0 100644
--- a/src/main/java/net/fabricmc/loom/configuration/providers/mappings/MappingsProviderImpl.java
+++ b/src/main/java/net/fabricmc/loom/configuration/providers/mappings/MappingsProviderImpl.java
@@ -66,10 +66,14 @@ import net.fabricmc.mappingio.tree.MemoryMappingTree;
 import net.fabricmc.stitch.Command;
 import net.fabricmc.stitch.commands.CommandProposeFieldNames;
 
+import net.ornithemc.nester.mapping.Nests;
+
 public class MappingsProviderImpl implements MappingsProvider, SharedService {
 	private static final Logger LOGGER = LoggerFactory.getLogger(MappingsProviderImpl.class);
 
 	private Supplier<MemoryMappingTree> mappingTree;
+	private Supplier<Nests> nests;
+
 	public final String mappingsIdentifier;
 
 	private final Path mappingsWorkingDir;
@@ -109,6 +113,10 @@ public class MappingsProviderImpl implements MappingsProvider, SharedService {
 		return Objects.requireNonNull(mappingTree, "Cannot get mappings before they have been read").get();
 	}
 
+	public Nests getNests() {
+		return Objects.requireNonNull(nests, "Cannot get nests before they have been read").get();
+	}
+
 	private static MappingsProviderImpl create(DependencyInfo dependency, MinecraftProvider minecraftProvider, Supplier<IntermediateMappingsService> calamusService) {
 		final String version = dependency.getResolvedVersion();
 		final Path inputJar = dependency.resolveFile().orElseThrow(() -> new RuntimeException("Could not resolve mappings: " + dependency)).toPath();
@@ -155,6 +163,7 @@ public class MappingsProviderImpl implements MappingsProvider, SharedService {
 		}
 
 		mappingTree = Suppliers.memoize(this::readMappings);
+		nests = Suppliers.memoize(this::readNests);
 	}
 
 	public void applyToProject(Project project, DependencyInfo dependency) {
@@ -217,6 +226,10 @@ public class MappingsProviderImpl implements MappingsProvider, SharedService {
 		}
 	}
 
+	private Nests readNests() {
+		return calamusService.get().getNests();
+	}
+
 	private static boolean areMappingsV2(Path path) throws IOException {
 		try (BufferedReader reader = Files.newBufferedReader(path)) {
 			return MappingReader.detectFormat(reader) == MappingFormat.TINY_2;
@@ -233,6 +246,20 @@ public class MappingsProviderImpl implements MappingsProvider, SharedService {
 		Files.copy(jar.getPath("mappings/mappings.tiny"), extractTo, StandardCopyOption.REPLACE_EXISTING);
 	}
 
+	public static void extractNests(Path jar, Path extractTo) throws IOException {
+		try (FileSystemUtil.Delegate delegate = FileSystemUtil.getJarFileSystem(jar)) {
+			extractNests(delegate.fs(), extractTo);
+		}
+	}
+
+	public static void extractNests(FileSystem jar, Path extractTo) throws IOException {
+		Path p = jar.getPath("mappings/mappings.nest");
+
+		if (Files.exists(p)) {
+			Files.copy(p, extractTo, StandardCopyOption.REPLACE_EXISTING);
+		}
+	}
+
 	private void extractExtras(FileSystem jar) throws IOException {
 		extractUnpickDefinitions(jar);
 		extractSignatureFixes(jar);
@@ -336,6 +363,11 @@ public class MappingsProviderImpl implements MappingsProvider, SharedService {
 		return calamusService.get().getCalamusTiny().toFile();
 	}
 
+	@Override
+	public File calamusNestFile() {
+		return calamusService.get().getCalamusNest().toFile();
+	}
+
 	private static String createMappingsIdentifier(String mappingsName, String version, String classifier, String minecraftVersion) {
 		//          mappingsName      . mcVersion . version        classifier
 		// Example: net.fabricmc.yarn . 1_16_5    . 1.16.5+build.5 -v2
diff --git a/src/main/java/net/fabricmc/loom/configuration/providers/mappings/NoOpIntermediateMappingsProvider.java b/src/main/java/net/fabricmc/loom/configuration/providers/mappings/NoOpIntermediateMappingsProvider.java
index 6e21742f2ad6f865152dcf24e74515458d6a5b1d..45d10d3ee14d55227d111f978d774a848dfbf674 100644
--- a/src/main/java/net/fabricmc/loom/configuration/providers/mappings/NoOpIntermediateMappingsProvider.java
+++ b/src/main/java/net/fabricmc/loom/configuration/providers/mappings/NoOpIntermediateMappingsProvider.java
@@ -40,7 +40,7 @@ public abstract class NoOpIntermediateMappingsProvider extends IntermediateMappi
 	private static final String HEADER = "tiny\t2\t0\tofficial\tcalamus";
 
 	@Override
-	public void provide(Path tinyMappings) throws IOException {
+	public void provide(Path tinyMappings, Path nestMappings) throws IOException {
 		Files.writeString(tinyMappings, HEADER, StandardCharsets.UTF_8);
 	}
 
diff --git a/src/main/java/net/fabricmc/loom/configuration/providers/minecraft/MinecraftProvider.java b/src/main/java/net/fabricmc/loom/configuration/providers/minecraft/MinecraftProvider.java
index 13189391dce290b89dec5039bb8aea71035d6fda..0edebe0030283c2fae8faa513c45092cadecebfb 100644
--- a/src/main/java/net/fabricmc/loom/configuration/providers/minecraft/MinecraftProvider.java
+++ b/src/main/java/net/fabricmc/loom/configuration/providers/minecraft/MinecraftProvider.java
@@ -31,21 +31,26 @@ import java.nio.file.Path;
 import java.util.List;
 import java.util.Objects;
 
-import com.google.common.base.Preconditions;
 import org.gradle.api.Project;
 import org.gradle.api.logging.Logger;
 import org.jetbrains.annotations.Nullable;
 
+import com.google.common.base.Preconditions;
+import com.google.common.io.Files;
+
 import net.fabricmc.loom.LoomGradleExtension;
 import net.fabricmc.loom.LoomGradlePlugin;
 import net.fabricmc.loom.configuration.DependencyInfo;
 import net.fabricmc.loom.configuration.providers.BundleMetadata;
+import net.fabricmc.loom.configuration.providers.mappings.MappingsProviderImpl;
 import net.fabricmc.loom.util.Constants;
 import net.fabricmc.loom.util.MirrorUtil;
 import net.fabricmc.loom.util.download.DownloadBuilder;
 import net.fabricmc.loom.util.download.DownloadExecutor;
 import net.fabricmc.loom.util.download.GradleDownloadProgressListener;
 import net.fabricmc.loom.util.gradle.ProgressGroup;
+import net.ornithemc.nester.Nester;
+import net.ornithemc.nester.mapping.Nests;
 
 public abstract class MinecraftProvider {
 	private String minecraftVersion;
@@ -58,6 +63,8 @@ public abstract class MinecraftProvider {
 	private File minecraftClientJar;
 	// Note this will be the boostrap jar starting with 21w39a
 	private File minecraftServerJar;
+	private File patchedMinecraftClientJar;
+	private File patchedMinecraftServerJar;
 	// The extracted server jar from the boostrap, only exists in >=21w39a
 	private File minecraftExtractedServerJar;
 	@Nullable
@@ -110,10 +117,12 @@ public abstract class MinecraftProvider {
 
 		if (provideClient()) {
 			minecraftClientJar = file("minecraft-client.jar");
+			patchedMinecraftClientJar = file("minecraft-client-nested.jar");
 		}
 
 		if (provideServer()) {
 			minecraftServerJar = file("minecraft-server.jar");
+			patchedMinecraftServerJar = file("minecraft-server-nested.jar");
 			minecraftExtractedServerJar = file("minecraft-extracted_server.jar");
 		}
 	}
@@ -201,6 +210,27 @@ public abstract class MinecraftProvider {
 		}
 	}
 
+	public void patchJars() throws IOException {
+		LoomGradleExtension extension = LoomGradleExtension.get(project);
+		MappingsProviderImpl mappingsProvider = extension.getMappingsProvider();
+		Nests nests = mappingsProvider.getNests();
+
+		if (provideClient()) {
+			if (nests.get().isEmpty()) {
+				Files.copy(minecraftClientJar, patchedMinecraftClientJar);
+			} else {
+				Nester.fixJar(minecraftClientJar.toPath(), patchedMinecraftClientJar.toPath(), nests);
+			}
+		}
+		if (provideServer()) {
+			if (nests.get().isEmpty()) {
+				Files.copy(minecraftServerJar, patchedMinecraftServerJar);
+			} else {
+				Nester.fixJar(minecraftServerJar.toPath(), patchedMinecraftServerJar.toPath(), nests);
+			}
+		}
+	}
+
 	protected final void extractBundledServerJar() throws IOException {
 		Preconditions.checkArgument(provideServer(), "Not configured to provide server jar");
 		Objects.requireNonNull(getServerBundleMetadata(), "Cannot bundled mc jar from none bundled server jar");
@@ -211,7 +241,7 @@ public abstract class MinecraftProvider {
 			throw new UnsupportedOperationException("Expected only 1 version in META-INF/versions.list, but got %d".formatted(getServerBundleMetadata().versions().size()));
 		}
 
-		getServerBundleMetadata().versions().get(0).unpackEntry(minecraftServerJar.toPath(), getMinecraftExtractedServerJar().toPath(), project);
+		getServerBundleMetadata().versions().get(0).unpackEntry(patchedMinecraftServerJar.toPath(), getMinecraftExtractedServerJar().toPath(), project);
 	}
 
 	public File workingDir() {
@@ -234,7 +264,7 @@ public abstract class MinecraftProvider {
 
 	public File getMinecraftClientJar() {
 		Preconditions.checkArgument(provideClient(), "Not configured to provide client jar");
-		return minecraftClientJar;
+		return patchedMinecraftClientJar;
 	}
 
 	// May be null on older versions
@@ -247,7 +277,7 @@ public abstract class MinecraftProvider {
 	// This may be the server bundler jar on newer versions prob not what you want.
 	public File getMinecraftServerJar() {
 		Preconditions.checkArgument(provideServer(), "Not configured to provide server jar");
-		return minecraftServerJar;
+		return patchedMinecraftServerJar;
 	}
 
 	public String minecraftVersion() {
