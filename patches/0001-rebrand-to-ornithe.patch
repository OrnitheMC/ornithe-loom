From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Space Walker <spacedoesrs@gmail.com>
Date: Thu, 8 Sep 2022 17:20:49 +0200
Subject: [PATCH] rebrand to ornithe


diff --git a/bootstrap/src/main/java/net/fabricmc/loom/bootstrap/LoomGradlePluginBootstrap.java b/bootstrap/src/main/java/net/fabricmc/loom/bootstrap/LoomGradlePluginBootstrap.java
index 804f486b753249b41cc33e7b1d48260c73a91391..3f0ecaf618e34fdf65b2b985d86cdfb36b9eec84 100644
--- a/bootstrap/src/main/java/net/fabricmc/loom/bootstrap/LoomGradlePluginBootstrap.java
+++ b/bootstrap/src/main/java/net/fabricmc/loom/bootstrap/LoomGradlePluginBootstrap.java
@@ -26,7 +26,7 @@ public class LoomGradlePluginBootstrap implements Plugin<PluginAware> {
 		if (pluginAware instanceof Project) {
 			Project project = (Project) pluginAware;
 
-			if (project.findProperty("fabric.loom.skip-env-validation") == null) {
+			if (project.findProperty("ornithe.loom.skip-env-validation") == null) {
 				validateEnvironment();
 			} else {
 				project.getLogger().lifecycle("Loom environment validation disabled. Please re-enable before reporting any issues.");
diff --git a/build.gradle b/build.gradle
index d8e601509b71f224347c502931e63106c57491a5..a777943f8740c2e09ffb6610e9cb2fe39e9b80c8 100644
--- a/build.gradle
+++ b/build.gradle
@@ -28,7 +28,7 @@ tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
 	}
 }
 
-group = 'net.fabricmc'
+group = 'net.ornithemc'
 archivesBaseName = project.name
 def baseVersion = '1.0'
 
@@ -40,6 +40,10 @@ if (ENV.BUILD_NUMBER) {
 }
 
 repositories {
+	maven {
+		name = 'Ornithe'
+		url = 'https://maven.ornithemc.net/releases'
+	}
 	maven {
 		name = 'Fabric'
 		url = 'https://maven.fabricmc.net/'
@@ -79,7 +83,7 @@ dependencies {
 	implementation ('org.ow2.asm:asm-util:9.3')
 
 	// game handling utils
-	implementation ('net.fabricmc:stitch:0.6.2') {
+	implementation ('net.ornithemc:stitch:0.7.7') {
 		exclude module: 'enigma'
 	}
 
@@ -169,8 +173,8 @@ codenarc {
 
 gradlePlugin {
 	plugins {
-		fabricLoom {
-			id = 'fabric-loom'
+		ornitheLoom {
+			id = 'ornithe-loom'
 			implementationClass = 'net.fabricmc.loom.bootstrap.LoomGradlePluginBootstrap'
 		}
 	}
@@ -195,8 +199,8 @@ test {
 	useJUnitPlatform()
 
 	// Forward system prop onto tests.
-	if (System.getProperty("fabric.loom.test.homeDir")) {
-		systemProperty "fabric.loom.test.homeDir", System.getProperty("fabric.loom.test.homeDir")
+	if (System.getProperty("ornithe.loom.test.homeDir")) {
+		systemProperty "ornithe.loom.test.homeDir", System.getProperty("ornithe.loom.test.homeDir")
 	}
 }
 
@@ -214,36 +218,6 @@ publishing {
 
 			from components.java
 		}
-
-		// Also publish a snapshot so people can use the latest version if they wish
-		snapshot(MavenPublication) { publication ->
-			groupId project.group
-			artifactId project.archivesBaseName
-			version baseVersion + '-SNAPSHOT'
-
-			from components.java
-		}
-
-		// Manually crate the plugin marker for snapshot versions
-		snapshotPlugin(MavenPublication) { publication ->
-			groupId 'fabric-loom'
-			artifactId 'fabric-loom.gradle.plugin'
-			version baseVersion + '-SNAPSHOT'
-
-			pom.withXml({
-				// Based off org.gradle.plugin.devel.plugins.MavenPluginPublishPlugin
-				Element root = asElement()
-				Document document = root.getOwnerDocument()
-				Node dependencies = root.appendChild(document.createElement('dependencies'))
-				Node dependency = dependencies.appendChild(document.createElement('dependency'))
-				Node groupId = dependency.appendChild(document.createElement('groupId'))
-				groupId.setTextContent('net.fabricmc')
-				Node artifactId = dependency.appendChild(document.createElement('artifactId'))
-				artifactId.setTextContent('fabric-loom')
-				Node version = dependency.appendChild(document.createElement('version'))
-				version.setTextContent(baseVersion + '-SNAPSHOT')
-			})
-		}
 	}
 	repositories {
 		maven {
diff --git a/checkstyle.xml b/checkstyle.xml
index e8844859b78e491d8cde25792e655e11c13f162f..c42227a9ccac895a53b9aa625be8c558156ba8fb 100644
--- a/checkstyle.xml
+++ b/checkstyle.xml
@@ -66,7 +66,7 @@
 		<module name="UnusedImports"/>
 
 		<module name="ImportOrder">
-			<property name="groups" value="java,javax,*,net.minecraft,net.fabricmc"/>
+			<property name="groups" value="java,javax,*,net.minecraft,net.fabricmc,net.ornithemc"/>
 			<property name="ordered" value="false"/><!-- the plugin orders alphabetically without considering separators.. -->
 			<property name="separated" value="true"/>
 			<property name="option" value="top"/>
diff --git a/gradle.properties b/gradle.properties
index 31014b156127886c44921900f480e68d4528da25..c97752d62dd63eed432118e0ac205cf184972b7b 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -1,5 +1,5 @@
-name = fabric-loom
-description = The Gradle plugin for Fabric
-url = https://github.com/FabricMC/fabric-loom
+name = ornithe-loom
+description = The Gradle plugin for Ornithe
+url = https://github.com/OrnitheMC/ornithe-loom
 
 kotlin.stdlib.default.dependency = false
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loom/LoomGradlePlugin.java b/src/main/java/net/fabricmc/loom/LoomGradlePlugin.java
index a75b67fcbd76a74b9e6f4786dd5bc5e19690790b..b9fe8ed88db45bb70866ec69145dc544a1dea60c 100644
--- a/src/main/java/net/fabricmc/loom/LoomGradlePlugin.java
+++ b/src/main/java/net/fabricmc/loom/LoomGradlePlugin.java
@@ -62,7 +62,7 @@ public class LoomGradlePlugin implements BootstrappedPlugin {
 	}
 
 	public void apply(Project project) {
-		project.getLogger().lifecycle("Fabric Loom: " + LOOM_VERSION);
+		project.getLogger().lifecycle("Ornithe Loom: " + LOOM_VERSION);
 		LibraryLocationLogger.logLibraryVersions();
 
 		// Apply default plugins
diff --git a/src/main/java/net/fabricmc/loom/LoomRepositoryPlugin.java b/src/main/java/net/fabricmc/loom/LoomRepositoryPlugin.java
index c0da3e8dabbd1a3419ca12a66ffc5f9652ccd1dc..43f0d3bef57e3ea89f868c1a2f9672e4e1563469 100644
--- a/src/main/java/net/fabricmc/loom/LoomRepositoryPlugin.java
+++ b/src/main/java/net/fabricmc/loom/LoomRepositoryPlugin.java
@@ -66,6 +66,10 @@ public class LoomRepositoryPlugin implements Plugin<PluginAware> {
 			repo.setName("UserLocalRemappedMods");
 			repo.setUrl(files.getRemappedModCache());
 		});
+		repositories.maven(repo -> {
+			repo.setName("Ornithe");
+			repo.setUrl(MirrorUtil.getOrnitheRepository(target));
+		});
 		repositories.maven(repo -> {
 			repo.setName("Fabric");
 			repo.setUrl(MirrorUtil.getFabricRepository(target));
diff --git a/src/main/java/net/fabricmc/loom/api/LoomGradleExtensionAPI.java b/src/main/java/net/fabricmc/loom/api/LoomGradleExtensionAPI.java
index 693f1d55b51965416208a8a27e07fdc391f0741f..a5b8be318cf5edae96eb4ab0e37792b9daf82e8b 100644
--- a/src/main/java/net/fabricmc/loom/api/LoomGradleExtensionAPI.java
+++ b/src/main/java/net/fabricmc/loom/api/LoomGradleExtensionAPI.java
@@ -126,10 +126,10 @@ public interface LoomGradleExtensionAPI {
 	void disableDeprecatedPomGeneration(MavenPublication publication);
 
 	/**
-	 * Reads the mod version from the fabric.mod.json file located in the main sourcesets resources.
-	 * This is useful if you want to set the gradle version based of the version in the fabric.mod.json file.
+	 * Reads the mod version from the ornithe.mod.json file located in the main sourcesets resources.
+	 * This is useful if you want to set the gradle version based of the version in the ornithe.mod.json file.
 	 *
-	 * @return the version defined in the fabric.mod.json
+	 * @return the version defined in the ornithe.mod.json
 	 */
 	String getModVersion();
 
diff --git a/src/main/java/net/fabricmc/loom/api/ModSettings.java b/src/main/java/net/fabricmc/loom/api/ModSettings.java
index 45d246beb01782305eec416cb42c1496bf6b45a4..08ff927df47e06b4721faef345dad1a2d1a62dfc 100644
--- a/src/main/java/net/fabricmc/loom/api/ModSettings.java
+++ b/src/main/java/net/fabricmc/loom/api/ModSettings.java
@@ -43,7 +43,7 @@ import net.fabricmc.loom.util.gradle.SourceSetReference;
  */
 public abstract class ModSettings implements Named {
 	/**
-	 * List of classpath directories, or jar files used to populate the `fabric.classPathGroups` Fabric Loader system property.
+	 * List of classpath directories, or jar files used to populate the `ornithe.classPathGroups` Fabric Loader system property.
 	 */
 	public abstract ConfigurableFileCollection getModFiles();
 
@@ -96,7 +96,7 @@ public abstract class ModSettings implements Named {
 	}
 
 	/**
-	 * List of classpath directories, used to populate the `fabric.classPathGroups` Fabric Loader system property.
+	 * List of classpath directories, used to populate the `ornithe.classPathGroups` Fabric Loader system property.
 	 * Use the {@link ModSettings#sourceSet} methods to add to this.
 	 */
 	@ApiStatus.Internal
diff --git a/src/main/java/net/fabricmc/loom/configuration/LoomDependencyManager.java b/src/main/java/net/fabricmc/loom/configuration/LoomDependencyManager.java
index 22ce5a3cadb2c63f3a6af65743070b5989bb8b2b..aa1422e0387e617d58521d130aa4833bfafbe6d3 100644
--- a/src/main/java/net/fabricmc/loom/configuration/LoomDependencyManager.java
+++ b/src/main/java/net/fabricmc/loom/configuration/LoomDependencyManager.java
@@ -83,7 +83,7 @@ public class LoomDependencyManager {
 		sourceRemapper.remapAll();
 
 		if (extension.getInstallerData() == null) {
-			project.getLogger().warn("fabric-installer.json not found in classpath!");
+			project.getLogger().warn("ornithe-installer.json not found in classpath!");
 		}
 
 		for (Runnable runnable : afterTasks) {
@@ -93,7 +93,7 @@ public class LoomDependencyManager {
 
 	public static JsonObject readInstallerJson(File file) {
 		try {
-			byte[] bytes = ZipUtils.unpackNullable(file.toPath(), "fabric-installer.json");
+			byte[] bytes = ZipUtils.unpackNullable(file.toPath(), "ornithe-installer.json");
 
 			if (bytes == null) {
 				return null;
diff --git a/src/main/java/net/fabricmc/loom/configuration/accesswidener/AccessWidenerFile.java b/src/main/java/net/fabricmc/loom/configuration/accesswidener/AccessWidenerFile.java
index 72c39b417441a0fbb590cb19c30c0911a2737333..025a7d0d6a5039f1a1c5f9e11839a85a7c8a5f85 100644
--- a/src/main/java/net/fabricmc/loom/configuration/accesswidener/AccessWidenerFile.java
+++ b/src/main/java/net/fabricmc/loom/configuration/accesswidener/AccessWidenerFile.java
@@ -48,7 +48,7 @@ public record AccessWidenerFile(
 		byte[] modJsonBytes;
 
 		try {
-			modJsonBytes = ZipUtils.unpackNullable(modJarPath, "fabric.mod.json");
+			modJsonBytes = ZipUtils.unpackNullable(modJarPath, "ornithe.mod.json");
 		} catch (IOException e) {
 			throw new UncheckedIOException("Failed to read access-widener file from: " + modJarPath.toAbsolutePath(), e);
 		}
@@ -71,7 +71,7 @@ public record AccessWidenerFile(
 		try {
 			content = ZipUtils.unpack(modJarPath, awPath);
 		} catch (IOException e) {
-			throw new UncheckedIOException("Could not find access widener file (%s) defined in the fabric.mod.json file of %s".formatted(awPath, modJarPath.toAbsolutePath()), e);
+			throw new UncheckedIOException("Could not find access widener file (%s) defined in the ornithe.mod.json file of %s".formatted(awPath, modJarPath.toAbsolutePath()), e);
 		}
 
 		return new AccessWidenerFile(
diff --git a/src/main/java/net/fabricmc/loom/configuration/ide/RunConfig.java b/src/main/java/net/fabricmc/loom/configuration/ide/RunConfig.java
index 379c421005b90a7e4793451a60edf69368d5e1be..0589ce91e5dd91849d2492d0bc9c987d5fc354fe 100644
--- a/src/main/java/net/fabricmc/loom/configuration/ide/RunConfig.java
+++ b/src/main/java/net/fabricmc/loom/configuration/ide/RunConfig.java
@@ -114,9 +114,9 @@ public class RunConfig {
 		runConfig.configName += extension.isRootProject() ? "" : " (" + project.getPath() + ")";
 		runConfig.eclipseProjectName = project.getExtensions().getByType(EclipseModel.class).getProject().getName();
 
-		runConfig.mainClass = "net.fabricmc.devlaunchinjector.Main";
-		runConfig.vmArgs.add("-Dfabric.dli.config=" + encodeEscaped(extension.getFiles().getDevLauncherConfig().getAbsolutePath()));
-		runConfig.vmArgs.add("-Dfabric.dli.env=" + environment.toLowerCase());
+		runConfig.mainClass = "net.ornithemc.devlaunchinjector.Main";
+		runConfig.vmArgs.add("-Dornithe.dli.config=" + encodeEscaped(extension.getFiles().getDevLauncherConfig().getAbsolutePath()));
+		runConfig.vmArgs.add("-Dornithe.dli.env=" + environment.toLowerCase());
 	}
 
 	// Turns camelCase/PascalCase into Capital Case
@@ -178,7 +178,7 @@ public class RunConfig {
 		// Custom parameters
 		runConfig.programArgs.addAll(settings.getProgramArgs());
 		runConfig.vmArgs.addAll(settings.getVmArgs());
-		runConfig.vmArgs.add("-Dfabric.dli.main=" + getMainClass(environment, extension, defaultMain));
+		runConfig.vmArgs.add("-Dornithe.dli.main=" + getMainClass(environment, extension, defaultMain));
 		runConfig.environmentVariables = new HashMap<>();
 		runConfig.environmentVariables.putAll(settings.getEnvironmentVariables());
 		runConfig.projectName = project.getName();
diff --git a/src/main/java/net/fabricmc/loom/configuration/ifaceinject/InterfaceInjectionProcessor.java b/src/main/java/net/fabricmc/loom/configuration/ifaceinject/InterfaceInjectionProcessor.java
index 033211390944bb090942ed7d8f167bacb244e158..51cb5189c3a90ea93041455d395dd7146c18cab0 100644
--- a/src/main/java/net/fabricmc/loom/configuration/ifaceinject/InterfaceInjectionProcessor.java
+++ b/src/main/java/net/fabricmc/loom/configuration/ifaceinject/InterfaceInjectionProcessor.java
@@ -271,7 +271,7 @@ public class InterfaceInjectionProcessor implements JarProcessor, GenerateSource
 		 * Reads the injected interfaces contained in a mod jar, or returns empty if there is none.
 		 */
 		public static List<InjectedInterface> fromModJar(Path modJarPath) {
-			final JsonObject jsonObject = ModUtils.getFabricModJson(modJarPath);
+			final JsonObject jsonObject = ModUtils.getOrnitheModJson(modJarPath);
 
 			if (jsonObject == null) {
 				return Collections.emptyList();
diff --git a/src/main/java/net/fabricmc/loom/configuration/mods/AccessWidenerUtils.java b/src/main/java/net/fabricmc/loom/configuration/mods/AccessWidenerUtils.java
index 3f463919bddc185f2567ac00f5a3df888ed3f148..d71cb2063ebea0b034afa394bfbb35046b59085b 100644
--- a/src/main/java/net/fabricmc/loom/configuration/mods/AccessWidenerUtils.java
+++ b/src/main/java/net/fabricmc/loom/configuration/mods/AccessWidenerUtils.java
@@ -58,7 +58,7 @@ public class AccessWidenerUtils {
 	}
 
 	public static AccessWidenerData readAccessWidenerData(Path inputJar) throws IOException {
-		byte[] modJsonBytes = ZipUtils.unpack(inputJar, "fabric.mod.json");
+		byte[] modJsonBytes = ZipUtils.unpack(inputJar, "ornithe.mod.json");
 		JsonObject jsonObject = LoomGradlePlugin.GSON.fromJson(new String(modJsonBytes, StandardCharsets.UTF_8), JsonObject.class);
 
 		if (!jsonObject.has("accessWidener")) {
diff --git a/src/main/java/net/fabricmc/loom/configuration/processors/ModJavadocProcessor.java b/src/main/java/net/fabricmc/loom/configuration/processors/ModJavadocProcessor.java
index b06447fe6660f3664a2febcdde0897840e15df33..1fc7a69e5fdd571cced32985bf6eb58da950585c 100644
--- a/src/main/java/net/fabricmc/loom/configuration/processors/ModJavadocProcessor.java
+++ b/src/main/java/net/fabricmc/loom/configuration/processors/ModJavadocProcessor.java
@@ -121,7 +121,7 @@ public final class ModJavadocProcessor implements JarProcessor, GenerateSourcesT
 	public record ModJavadoc(String modId, MemoryMappingTree mappingTree) {
 		@Nullable
 		public static ModJavadoc fromModJar(Path path) throws IOException {
-			JsonObject jsonObject = ModUtils.getFabricModJson(path);
+			JsonObject jsonObject = ModUtils.getOrnitheModJson(path);
 
 			if (jsonObject == null || !jsonObject.has("custom")) {
 				return null;
diff --git a/src/main/java/net/fabricmc/loom/extension/LoomFilesBaseImpl.java b/src/main/java/net/fabricmc/loom/extension/LoomFilesBaseImpl.java
index 16752f5d1723e4b2b184a3df76bfd8d4cccfc6db..64084aeac64d0a4a490ec18e8166a428bf0e21bc 100644
--- a/src/main/java/net/fabricmc/loom/extension/LoomFilesBaseImpl.java
+++ b/src/main/java/net/fabricmc/loom/extension/LoomFilesBaseImpl.java
@@ -50,7 +50,7 @@ public abstract class LoomFilesBaseImpl implements LoomFiles {
 
 	@Override
 	public File getUserCache() {
-		return createFile(getGradleUserHomeDir(), "caches" + File.separator + "fabric-loom");
+		return createFile(getGradleUserHomeDir(), "caches" + File.separator + "ornithe-loom");
 	}
 
 	@Override
diff --git a/src/main/java/net/fabricmc/loom/task/AbstractRemapJarTask.java b/src/main/java/net/fabricmc/loom/task/AbstractRemapJarTask.java
index 053d8ec54e54d760ef03e57ddd818f3718f292b3..c14d83b54cd1d055b3fc4370da6ccb1d9ad68301 100644
--- a/src/main/java/net/fabricmc/loom/task/AbstractRemapJarTask.java
+++ b/src/main/java/net/fabricmc/loom/task/AbstractRemapJarTask.java
@@ -62,9 +62,9 @@ import net.fabricmc.loom.util.ZipUtils;
 
 public abstract class AbstractRemapJarTask extends Jar {
 	public static final String MANIFEST_PATH = "META-INF/MANIFEST.MF";
-	public static final String MANIFEST_NAMESPACE_KEY = "Fabric-Mapping-Namespace";
-	public static final String MANIFEST_SPLIT_ENV_KEY = "Fabric-Loom-Split-Environment";
-	public static final String MANIFEST_CLIENT_ENTRIES_KEY = "Fabric-Loom-Client-Only-Entries";
+	public static final String MANIFEST_NAMESPACE_KEY = "Ornithe-Mapping-Namespace";
+	public static final String MANIFEST_SPLIT_ENV_KEY = "Ornithe-Loom-Split-Environment";
+	public static final String MANIFEST_CLIENT_ENTRIES_KEY = "Ornithe-Loom-Client-Only-Entries";
 	public static final Attributes.Name MANIFEST_SPLIT_ENV_NAME = new Attributes.Name(MANIFEST_SPLIT_ENV_KEY);
 	public static final Attributes.Name MANIFEST_CLIENT_ENTRIES_NAME = new Attributes.Name(MANIFEST_CLIENT_ENTRIES_KEY);
 
diff --git a/src/main/java/net/fabricmc/loom/task/RemapJarTask.java b/src/main/java/net/fabricmc/loom/task/RemapJarTask.java
index 5fc7a01f24dcd788c7feac507c3b3f5f984c8a26..3b10647a94cd8e78b74a7e850ffe0455b7db1196 100644
--- a/src/main/java/net/fabricmc/loom/task/RemapJarTask.java
+++ b/src/main/java/net/fabricmc/loom/task/RemapJarTask.java
@@ -138,14 +138,14 @@ public abstract class RemapJarTask extends AbstractRemapJarTask {
 		final LoomGradleExtension extension = LoomGradleExtension.get(getProject());
 		final MixinExtension mixinExtension = extension.getMixin();
 
-		final JsonObject fabricModJson = ModUtils.getFabricModJson(getInputFile().getAsFile().get().toPath());
+		final JsonObject ornitheModJson = ModUtils.getOrnitheModJson(getInputFile().getAsFile().get().toPath());
 
-		if (fabricModJson == null) {
-			getProject().getLogger().warn("Could not find fabric.mod.json file in: " + getInputFile().getAsFile().get().getName());
+		if (ornitheModJson == null) {
+			getProject().getLogger().warn("Could not find ornithe.mod.json file in: " + getInputFile().getAsFile().get().getName());
 			return;
 		}
 
-		final Collection<String> allMixinConfigs = MixinRefmapHelper.getMixinConfigurationFiles(fabricModJson);
+		final Collection<String> allMixinConfigs = MixinRefmapHelper.getMixinConfigurationFiles(ornitheModJson);
 
 		for (SourceSet sourceSet : mixinExtension.getMixinSourceSets()) {
 			MixinExtension.MixinInformationContainer container = Objects.requireNonNull(
diff --git a/src/main/java/net/fabricmc/loom/task/launch/GenerateDLIConfigTask.java b/src/main/java/net/fabricmc/loom/task/launch/GenerateDLIConfigTask.java
index 49a6b1c12d71c1a7f2c235765a1cbcb3b23082e1..a9841c3c99acd2e3e3a4848449591253803817ec 100644
--- a/src/main/java/net/fabricmc/loom/task/launch/GenerateDLIConfigTask.java
+++ b/src/main/java/net/fabricmc/loom/task/launch/GenerateDLIConfigTask.java
@@ -55,8 +55,8 @@ public abstract class GenerateDLIConfigTask extends AbstractLoomTask {
 		}
 
 		final LaunchConfig launchConfig = new LaunchConfig()
-				.property("fabric.development", "true")
-				.property("fabric.remapClasspathFile", getExtension().getFiles().getRemapClasspathFile().getAbsolutePath())
+				.property("ornithe.development", "true")
+				.property("ornithe.remapClasspathFile", getExtension().getFiles().getRemapClasspathFile().getAbsolutePath())
 				.property("log4j.configurationFile", getAllLog4JConfigFiles())
 				.property("log4j2.formatMsgNoLookups", "true")
 
@@ -74,12 +74,12 @@ public abstract class GenerateDLIConfigTask extends AbstractLoomTask {
 		}
 
 		if (getExtension().areEnvironmentSourceSetsSplit()) {
-			launchConfig.property("client", "fabric.gameJarPath.client", getGameJarPath("client"));
-			launchConfig.property("fabric.gameJarPath", getGameJarPath("common"));
+			launchConfig.property("client", "ornithe.gameJarPath.client", getGameJarPath("client"));
+			launchConfig.property("ornithe.gameJarPath", getGameJarPath("common"));
 		}
 
 		if (!getExtension().getMods().isEmpty()) {
-			launchConfig.property("fabric.classPathGroups", getClassPathGroups());
+			launchConfig.property("ornithe.classPathGroups", getClassPathGroups());
 		}
 
 		final boolean plainConsole = getProject().getGradle().getStartParameter().getConsoleOutput() == ConsoleOutput.Plain;
@@ -89,7 +89,7 @@ public abstract class GenerateDLIConfigTask extends AbstractLoomTask {
 
 		//Enable ansi by default for idea and vscode when gradle is not ran with plain console.
 		if (ansiSupportedIDE && !plainConsole) {
-			launchConfig.property("fabric.log.disableAnsi", "false");
+			launchConfig.property("ornithe.log.disableAnsi", "false");
 		}
 
 		FileUtils.writeStringToFile(getExtension().getFiles().getDevLauncherConfig(), launchConfig.asString(), StandardCharsets.UTF_8);
diff --git a/src/main/java/net/fabricmc/loom/task/launch/GenerateLog4jConfigTask.java b/src/main/java/net/fabricmc/loom/task/launch/GenerateLog4jConfigTask.java
index fc249bbad90c9e937e79c4a7dd073cfbf0163d52..fad9cc361a31b399bd86506940f96c78cfb52fde 100644
--- a/src/main/java/net/fabricmc/loom/task/launch/GenerateLog4jConfigTask.java
+++ b/src/main/java/net/fabricmc/loom/task/launch/GenerateLog4jConfigTask.java
@@ -38,7 +38,7 @@ public abstract class GenerateLog4jConfigTask extends AbstractLoomTask {
 	public void run() {
 		Path outputFile = getExtension().getFiles().getDefaultLog4jConfigFile().toPath();
 
-		try (InputStream is = GenerateLog4jConfigTask.class.getClassLoader().getResourceAsStream("log4j2.fabric.xml")) {
+		try (InputStream is = GenerateLog4jConfigTask.class.getClassLoader().getResourceAsStream("log4j2.ornithe.xml")) {
 			Files.deleteIfExists(outputFile);
 			Files.copy(is, outputFile);
 		} catch (IOException e) {
diff --git a/src/main/java/net/fabricmc/loom/task/service/JarManifestService.java b/src/main/java/net/fabricmc/loom/task/service/JarManifestService.java
index 117207fad877e429d9b560e3746b3941171687de..61d2279e32554a16b2b21145300a97311350c16d 100644
--- a/src/main/java/net/fabricmc/loom/task/service/JarManifestService.java
+++ b/src/main/java/net/fabricmc/loom/task/service/JarManifestService.java
@@ -50,7 +50,7 @@ public abstract class JarManifestService implements BuildService<JarManifestServ
 		Property<String> getMCEVersion();
 		Property<String> getMinecraftVersion();
 		Property<String> getTinyRemapperVersion();
-		Property<String> getFabricLoaderVersion();
+		Property<String> getOrnitheLoaderVersion();
 		Property<MixinVersion> getMixinVersion();
 	}
 
@@ -65,7 +65,7 @@ public abstract class JarManifestService implements BuildService<JarManifestServ
 				params.getMCEVersion().set(Constants.Dependencies.Versions.MIXIN_COMPILE_EXTENSIONS);
 				params.getMinecraftVersion().set(extension.getMinecraftProvider().minecraftVersion());
 				params.getTinyRemapperVersion().set(tinyRemapperVersion.orElse("unknown"));
-				params.getFabricLoaderVersion().set(getLoaderVersion(project).orElse("unknown"));
+				params.getOrnitheLoaderVersion().set(getLoaderVersion(project).orElse("unknown"));
 				params.getMixinVersion().set(getMixinVersion(project).orElse(new MixinVersion("unknown", "unknown")));
 			});
 		});
@@ -85,7 +85,7 @@ public abstract class JarManifestService implements BuildService<JarManifestServ
 		attributes.putValue("Fabric-Mixin-Compile-Extensions-Version", p.getMCEVersion().get());
 		attributes.putValue("Fabric-Minecraft-Version", p.getMinecraftVersion().get());
 		attributes.putValue("Fabric-Tiny-Remapper-Version", p.getTinyRemapperVersion().get());
-		attributes.putValue("Fabric-Loader-Version", p.getFabricLoaderVersion().get());
+		attributes.putValue("Ornithe-Loader-Version", p.getOrnitheLoaderVersion().get());
 
 		// This can be overridden by mods if required
 		if (!attributes.containsKey("Fabric-Mixin-Version")) {
@@ -102,7 +102,7 @@ public abstract class JarManifestService implements BuildService<JarManifestServ
 		LoomGradleExtension extension = LoomGradleExtension.get(project);
 
 		if (extension.getInstallerData() == null) {
-			project.getLogger().warn("Could not determine fabric loader version for jar manifest");
+			project.getLogger().warn("Could not determine ornithe loader version for jar manifest");
 			return Optional.empty();
 		}
 
diff --git a/src/main/java/net/fabricmc/loom/task/service/SourceRemapperService.java b/src/main/java/net/fabricmc/loom/task/service/SourceRemapperService.java
index 30b1ea0fb56e2c313a76ac7a689e88ac1db304cd..022c7cafba823777a213b602ec1ba45a1503b6a5 100644
--- a/src/main/java/net/fabricmc/loom/task/service/SourceRemapperService.java
+++ b/src/main/java/net/fabricmc/loom/task/service/SourceRemapperService.java
@@ -88,7 +88,7 @@ public final class SourceRemapperService implements SharedService {
 		// Create a temp directory with all of the sources
 		if (!Files.isDirectory(source)) {
 			isSrcTmp = true;
-			srcPath = Files.createTempDirectory("fabric-loom-src");
+			srcPath = Files.createTempDirectory("ornithe-loom-src");
 			ZipUtils.unpackAll(source, srcPath);
 		}
 
diff --git a/src/main/java/net/fabricmc/loom/util/Constants.java b/src/main/java/net/fabricmc/loom/util/Constants.java
index f5e694ea750ab9b3c67a2946146cd105908ecc8c..7266f4fad4527933cc279db81ddb38fa6f3d4ec0 100644
--- a/src/main/java/net/fabricmc/loom/util/Constants.java
+++ b/src/main/java/net/fabricmc/loom/util/Constants.java
@@ -32,6 +32,7 @@ public class Constants {
 	public static final String RESOURCES_BASE = "https://resources.download.minecraft.net/";
 	public static final String VERSION_MANIFESTS = "https://piston-meta.mojang.com/mc/game/version_manifest_v2.json";
 	public static final String EXPERIMENTAL_VERSIONS = "https://maven.fabricmc.net/net/minecraft/experimental_versions.json";
+	public static final String ORNITHE_REPOSITORY = "https://maven.ornithemc.net/releases";
 	public static final String FABRIC_REPOSITORY = "https://maven.fabricmc.net/";
 
 	public static final int ASM_VERSION = Opcodes.ASM9;
@@ -81,8 +82,8 @@ public class Constants {
 	 * Constants related to dependencies.
 	 */
 	public static final class Dependencies {
-		public static final String MIXIN_COMPILE_EXTENSIONS = "net.fabricmc:fabric-mixin-compile-extensions:";
-		public static final String DEV_LAUNCH_INJECTOR = "net.fabricmc:dev-launch-injector:";
+		public static final String MIXIN_COMPILE_EXTENSIONS = "net.ornithemc:ornithe-mixin-compile-extensions:";
+		public static final String DEV_LAUNCH_INJECTOR = "net.ornithemc:dev-launch-injector:";
 		public static final String TERMINAL_CONSOLE_APPENDER = "net.minecrell:terminalconsoleappender:";
 		public static final String JETBRAINS_ANNOTATIONS = "org.jetbrains:annotations:";
 		public static final String NATIVE_SUPPORT = "net.fabricmc:fabric-loom-native-support:";
@@ -94,8 +95,8 @@ public class Constants {
 		 * Constants for versions of dependencies.
 		 */
 		public static final class Versions {
-			public static final String MIXIN_COMPILE_EXTENSIONS = "0.5.0";
-			public static final String DEV_LAUNCH_INJECTOR = "0.2.1+build.8";
+			public static final String MIXIN_COMPILE_EXTENSIONS = "0.1.0";
+			public static final String DEV_LAUNCH_INJECTOR = "0.1.0";
 			public static final String TERMINAL_CONSOLE_APPENDER = "1.2.0";
 			public static final String JETBRAINS_ANNOTATIONS = "23.0.0";
 			public static final String NATIVE_SUPPORT_VERSION = "1.0.1";
@@ -118,8 +119,8 @@ public class Constants {
 	}
 
 	public static final class Knot {
-		public static final String KNOT_CLIENT = "net.fabricmc.loader.launch.knot.KnotClient";
-		public static final String KNOT_SERVER = "net.fabricmc.loader.launch.knot.KnotServer";
+		public static final String KNOT_CLIENT = "net.ornithemc.loader.launch.knot.KnotClient";
+		public static final String KNOT_SERVER = "net.ornithemc.loader.launch.knot.KnotServer";
 
 		private Knot() {
 		}
diff --git a/src/main/java/net/fabricmc/loom/util/MirrorUtil.java b/src/main/java/net/fabricmc/loom/util/MirrorUtil.java
index 3350a985f73e403f086a2a988283cbe4644d0cc2..a5191f7e8a5bd23cc0b1e7b69df49066afae29fb 100644
--- a/src/main/java/net/fabricmc/loom/util/MirrorUtil.java
+++ b/src/main/java/net/fabricmc/loom/util/MirrorUtil.java
@@ -59,6 +59,14 @@ public class MirrorUtil {
 		return Constants.EXPERIMENTAL_VERSIONS;
 	}
 
+	public static String getOrnitheRepository(ExtensionAware aware) {
+		if (aware.getExtensions().getExtraProperties().has("loom_ornithe_repository")) {
+			return String.valueOf(aware.getExtensions().getExtraProperties().get("loom_ornithe_repository"));
+		}
+
+		return Constants.ORNITHE_REPOSITORY;
+	}
+
 	public static String getFabricRepository(ExtensionAware aware) {
 		if (aware.getExtensions().getExtraProperties().has("loom_fabric_repository")) {
 			return String.valueOf(aware.getExtensions().getExtraProperties().get("loom_fabric_repository"));
diff --git a/src/main/java/net/fabricmc/loom/util/ModUtils.java b/src/main/java/net/fabricmc/loom/util/ModUtils.java
index 31298d953d72849b38f9a41b3f5bbbb565a81397..1b40fd2ac1f2b865b8a0d9ad1f4d4c670e6dadf5 100644
--- a/src/main/java/net/fabricmc/loom/util/ModUtils.java
+++ b/src/main/java/net/fabricmc/loom/util/ModUtils.java
@@ -41,15 +41,15 @@ public final class ModUtils {
 	}
 
 	public static boolean isMod(Path input) {
-		return ZipUtils.contains(input, "fabric.mod.json");
+		return ZipUtils.contains(input, "ornithe.mod.json");
 	}
 
 	@Nullable
-	public static JsonObject getFabricModJson(Path path) {
+	public static JsonObject getOrnitheModJson(Path path) {
 		try {
-			return ZipUtils.unpackGsonNullable(path, "fabric.mod.json", JsonObject.class);
+			return ZipUtils.unpackGsonNullable(path, "ornithe.mod.json", JsonObject.class);
 		} catch (IOException e) {
-			throw new UncheckedIOException("Failed to extract fabric.mod.json from " + path, e);
+			throw new UncheckedIOException("Failed to extract ornithe.mod.json from " + path, e);
 		}
 	}
 }
diff --git a/src/main/java/net/fabricmc/loom/util/SidedClassVisitor.java b/src/main/java/net/fabricmc/loom/util/SidedClassVisitor.java
index 5d2f7c6a7472b562abc0756e074a8b1e5bc23112..8dcff18d74bf4017f1971ccda20ea641b5f332c8 100644
--- a/src/main/java/net/fabricmc/loom/util/SidedClassVisitor.java
+++ b/src/main/java/net/fabricmc/loom/util/SidedClassVisitor.java
@@ -38,8 +38,8 @@ public final class SidedClassVisitor extends ClassVisitor {
 	public static final TinyRemapper.ApplyVisitorProvider CLIENT = (cls, next) -> new SidedClassVisitor("client", next);
 	public static final TinyRemapper.ApplyVisitorProvider SERVER = (cls, next) -> new SidedClassVisitor("server", next);
 
-	private static final String ENVIRONMENT_DESCRIPTOR = "Lnet/fabricmc/api/Environment;";
-	private static final String SIDE_DESCRIPTOR = "Lnet/fabricmc/api/EnvType;";
+	private static final String ENVIRONMENT_DESCRIPTOR = "Lnet/ornithemc/api/Environment;";
+	private static final String SIDE_DESCRIPTOR = "Lnet/ornithemc/api/EnvType;";
 
 	private final String side;
 	private boolean hasExisting = false;
diff --git a/src/main/java/net/fabricmc/loom/util/SourceRemapper.java b/src/main/java/net/fabricmc/loom/util/SourceRemapper.java
index 4c069aea7852903f862a87b4da5d78b8237e7a46..4d4a06ac1ddd61773ed5580491df09bec0780995 100644
--- a/src/main/java/net/fabricmc/loom/util/SourceRemapper.java
+++ b/src/main/java/net/fabricmc/loom/util/SourceRemapper.java
@@ -122,7 +122,7 @@ public class SourceRemapper {
 		if (!source.isDirectory()) {
 			// create tmp directory
 			isSrcTmp = true;
-			srcPath = Files.createTempDirectory("fabric-loom-src");
+			srcPath = Files.createTempDirectory("ornithe-loom-src");
 			ZipUtils.unpackAll(source.toPath(), srcPath);
 		}
 
diff --git a/src/main/resources/log4j2.fabric.xml b/src/main/resources/log4j2.ornithe.xml
similarity index 100%
rename from src/main/resources/log4j2.fabric.xml
rename to src/main/resources/log4j2.ornithe.xml
diff --git a/src/test/groovy/net/fabricmc/loom/test/util/GradleProjectTestTrait.groovy b/src/test/groovy/net/fabricmc/loom/test/util/GradleProjectTestTrait.groovy
index c3dd4727a11158f712445f9910d78a09c2e397c2..7e06ca40fd8a9a3e168c2aee68c068c9c5e2eb9d 100644
--- a/src/test/groovy/net/fabricmc/loom/test/util/GradleProjectTestTrait.groovy
+++ b/src/test/groovy/net/fabricmc/loom/test/util/GradleProjectTestTrait.groovy
@@ -47,7 +47,7 @@ trait GradleProjectTestTrait {
         File gradleHomeDir = options.gradleHomeDir as File ?: options.sharedFiles ? sharedGradleHomeDir : File.createTempDir()
 
 		// Useful for faster local testing.
-		def homeDirOverride = System.getProperty("fabric.loom.test.homeDir")
+		def homeDirOverride = System.getProperty("ornithe.loom.test.homeDir")
 
 		if (homeDirOverride) {
 			gradleHomeDir = new File(homeDirOverride)
@@ -243,7 +243,7 @@ trait GradleProjectTestTrait {
         }
 
         File getGeneratedSources(String mappings) {
-            return new File(getGradleHomeDir(), "caches/fabric-loom/${mappings}/minecraft-merged-named-sources.jar")
+            return new File(getGradleHomeDir(), "caches/ornithe-loom/${mappings}/minecraft-merged-named-sources.jar")
         }
 
         File getGeneratedLocalSources(String mappings) {
