From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Copetan <copetanbird@gmail.com>
Date: Wed, 7 Sep 2022 23:40:43 -0700
Subject: [PATCH] initial commit might be an incomplete mess, I need to go to
 sleep though


diff --git a/src/main/java/net/fabricmc/loom/LoomGradleExtension.java b/src/main/java/net/fabricmc/loom/LoomGradleExtension.java
index 72546cdb6255dbbd7dae478e6b0dd50616d7f9f7..4c013d2ffefdba66349d209a473dde8489e2cb6f 100644
--- a/src/main/java/net/fabricmc/loom/LoomGradleExtension.java
+++ b/src/main/java/net/fabricmc/loom/LoomGradleExtension.java
@@ -92,7 +92,7 @@ public interface LoomGradleExtension extends LoomGradleExtensionAPI {
 	default List<Path> getMinecraftJars(MappingsNamespace mappingsNamespace) {
 		return switch (mappingsNamespace) {
 		case NAMED -> getNamedMinecraftProvider().getMinecraftJars();
-		case INTERMEDIARY -> getIntermediaryMinecraftProvider().getMinecraftJars();
+		case CALAMUS -> getIntermediaryMinecraftProvider().getMinecraftJars();
 		case OFFICIAL -> getMinecraftProvider().getMinecraftJars();
 		};
 	}
diff --git a/src/main/java/net/fabricmc/loom/api/LoomGradleExtensionAPI.java b/src/main/java/net/fabricmc/loom/api/LoomGradleExtensionAPI.java
index 693f1d55b51965416208a8a27e07fdc391f0741f..21141e1abe12ac363e96abe4ac667eb7bf86b60a 100644
--- a/src/main/java/net/fabricmc/loom/api/LoomGradleExtensionAPI.java
+++ b/src/main/java/net/fabricmc/loom/api/LoomGradleExtensionAPI.java
@@ -178,7 +178,7 @@ public interface LoomGradleExtensionAPI {
 	/**
 	 * Use "%1$s" as a placeholder for the minecraft version.
 	 *
-	 * @return the intermediary url template
+	 * @return the calamus url template
 	 */
 	Property<String> getIntermediaryUrl();
 
diff --git a/src/main/java/net/fabricmc/loom/api/mappings/intermediate/IntermediateMappingsProvider.java b/src/main/java/net/fabricmc/loom/api/mappings/intermediate/IntermediateMappingsProvider.java
index 594a74b8fad03e8dd1db706a86463d4d02072230..dd871134dd0cd9f83b6bed75f02930de216e99a4 100644
--- a/src/main/java/net/fabricmc/loom/api/mappings/intermediate/IntermediateMappingsProvider.java
+++ b/src/main/java/net/fabricmc/loom/api/mappings/intermediate/IntermediateMappingsProvider.java
@@ -45,7 +45,7 @@ public abstract class IntermediateMappingsProvider implements Named {
 	public abstract Property<Function<String, DownloadBuilder>> getDownloader();
 
 	/**
-	 * Generate or download a tinyv2 mapping file with intermediary and named namespaces.
+	 * Generate or download a tinyv2 mapping file with calamus and named namespaces.
 	 * @throws IOException
 	 */
 	public abstract void provide(Path tinyMappings) throws IOException;
diff --git a/src/main/java/net/fabricmc/loom/api/mappings/layered/MappingsNamespace.java b/src/main/java/net/fabricmc/loom/api/mappings/layered/MappingsNamespace.java
index 4e3a628ad20c9a6a774bc5914f71a2177466f0a3..9fcfe3dcf7f69726f77ebd18543a23369d849202 100644
--- a/src/main/java/net/fabricmc/loom/api/mappings/layered/MappingsNamespace.java
+++ b/src/main/java/net/fabricmc/loom/api/mappings/layered/MappingsNamespace.java
@@ -38,13 +38,13 @@ public enum MappingsNamespace {
 	OFFICIAL,
 
 	/**
-	 * Intermediary mappings have been generated to provide a stable set of names across minecraft versions.
+	 * Calamus mappings have been generated to provide a stable set of names across minecraft versions.
 	 *
-	 * <p>Intermediary is used in a production runtime (outside a dev env) allowing mods to run across multiple versions of the game. Mods are remapped from "named" at build time.
+	 * <p>Calamus is used in a production runtime (outside a dev env) allowing mods to run across multiple versions of the game. Mods are remapped from "named" at build time.
 	 *
 	 * @see <a href="https://github.com/FabricMC/intermediary/">github.com/FabricMC/intermediary/</a>
 	 */
-	INTERMEDIARY,
+	CALAMUS,
 
 	/**
 	 * Named mappings are the developer friendly names used to develop mods against.
@@ -60,7 +60,7 @@ public enum MappingsNamespace {
 	public static @Nullable MappingsNamespace of(String namespace) {
 		return switch (namespace) {
 		case "official" -> OFFICIAL;
-		case "intermediary" -> INTERMEDIARY;
+		case "calamus" -> CALAMUS;
 		case "named" -> NAMED;
 		default -> null;
 		};
diff --git a/src/main/java/net/fabricmc/loom/api/mappings/layered/spec/FileMappingsSpecBuilder.java b/src/main/java/net/fabricmc/loom/api/mappings/layered/spec/FileMappingsSpecBuilder.java
index 8028881ac71d8ee73d4e505673f49fe625e70984..1e290b9211e2d6655d319fa4b1798c5e44eaf0ec 100644
--- a/src/main/java/net/fabricmc/loom/api/mappings/layered/spec/FileMappingsSpecBuilder.java
+++ b/src/main/java/net/fabricmc/loom/api/mappings/layered/spec/FileMappingsSpecBuilder.java
@@ -54,7 +54,7 @@ public interface FileMappingsSpecBuilder {
 	 * if the mapping format itself doesn't provide namespaces with names
 	 * (e.g. Enigma mappings).
 	 *
-	 * <p>The default fallback namespaces are {@code intermediary} as the source namespace
+	 * <p>The default fallback namespaces are {@code calamus} as the source namespace
 	 * and {@code named} as the target namespace as in Yarn.
 	 *
 	 * @param sourceNamespace the fallback source namespace
@@ -83,9 +83,9 @@ public interface FileMappingsSpecBuilder {
 	 *
 	 * <p>The merge namespace is the namespace that is used to match up this layer's
 	 * names to the rest of the mappings. For example, Yarn mappings should be merged through
-	 * the intermediary names.
+	 * the calamus names.
 	 *
-	 * <p>The default merge namespace is {@link MappingsNamespace#INTERMEDIARY}.
+	 * <p>The default merge namespace is {@link MappingsNamespace#CALAMUS}.
 	 *
 	 * @param namespace the new merge namespace
 	 * @return this builder
@@ -97,9 +97,9 @@ public interface FileMappingsSpecBuilder {
 	 *
 	 * <p>The merge namespace is the namespace that is used to match up this layer's
 	 * names to the rest of the mappings. For example, Yarn mappings should be merged through
-	 * the intermediary names.
+	 * the calamus names.
 	 *
-	 * <p>The default merge namespace is {@code intermediary}.
+	 * <p>The default merge namespace is {@code calamus}.
 	 *
 	 * @param namespace the new merge namespace
 	 * @return this builder
diff --git a/src/main/java/net/fabricmc/loom/api/mappings/layered/spec/MojangMappingsSpecBuilder.java b/src/main/java/net/fabricmc/loom/api/mappings/layered/spec/MojangMappingsSpecBuilder.java
index 1db0ff021fde56ca45d824dc8af35e315ce6c385..b2e3b665a06b4e7b4d2f02f61823768731d69983 100644
--- a/src/main/java/net/fabricmc/loom/api/mappings/layered/spec/MojangMappingsSpecBuilder.java
+++ b/src/main/java/net/fabricmc/loom/api/mappings/layered/spec/MojangMappingsSpecBuilder.java
@@ -28,7 +28,7 @@ public interface MojangMappingsSpecBuilder {
 	/**
 	 * When enabled synthetic fields and methods will be mapped to name specified in the official mojang mappings.
 	 *
-	 * <p>When disabled synthetic fields and methods will not be mapped leaving them with their intermediary name.
+	 * <p>When disabled synthetic fields and methods will not be mapped leaving them with their calamus name.
 	 */
 	MojangMappingsSpecBuilder setNameSyntheticMembers(boolean value);
 
diff --git a/src/main/java/net/fabricmc/loom/build/mixin/AnnotationProcessorInvoker.java b/src/main/java/net/fabricmc/loom/build/mixin/AnnotationProcessorInvoker.java
index 0a79dab80f9e25eda54d70769ad0a8950db6cac4..3a0a34220c32b6d554d70644d4c1cc6248ffce9c 100644
--- a/src/main/java/net/fabricmc/loom/build/mixin/AnnotationProcessorInvoker.java
+++ b/src/main/java/net/fabricmc/loom/build/mixin/AnnotationProcessorInvoker.java
@@ -93,8 +93,8 @@ public abstract class AnnotationProcessorInvoker<T extends Task> {
 			LoomGradleExtension loom = LoomGradleExtension.get(project);
 			String refmapName = Objects.requireNonNull(MixinExtension.getMixinInformationContainer(sourceSet)).refmapNameProvider().get();
 			Map<String, String> args = new HashMap<>() {{
-					put(Constants.MixinArguments.IN_MAP_FILE_NAMED_INTERMEDIARY, loom.getMappingsProvider().tinyMappings.toFile().getCanonicalPath());
-					put(Constants.MixinArguments.OUT_MAP_FILE_NAMED_INTERMEDIARY, MixinMappingsService.getMixinMappingFile(project, sourceSet).getCanonicalPath());
+					put(Constants.MixinArguments.IN_MAP_FILE_NAMED_CALAMUS, loom.getMappingsProvider().tinyMappings.toFile().getCanonicalPath());
+					put(Constants.MixinArguments.OUT_MAP_FILE_NAMED_CALAMUS, MixinMappingsService.getMixinMappingFile(project, sourceSet).getCanonicalPath());
 					put(Constants.MixinArguments.OUT_REFMAP_FILE, getRefmapDestination(task, refmapName));
 					put(Constants.MixinArguments.DEFAULT_OBFUSCATION_ENV, "named:" + loom.getMixin().getRefmapTargetNamespace().get());
 					put(Constants.MixinArguments.QUIET, "true");
diff --git a/src/main/java/net/fabricmc/loom/configuration/accesswidener/AccessWidenerJarProcessor.java b/src/main/java/net/fabricmc/loom/configuration/accesswidener/AccessWidenerJarProcessor.java
index e1b23ea3b1ec479eec117f1bb439a48212b1a727..e1f8f6113bc15b7020701a97e3020ea976cea712 100644
--- a/src/main/java/net/fabricmc/loom/configuration/accesswidener/AccessWidenerJarProcessor.java
+++ b/src/main/java/net/fabricmc/loom/configuration/accesswidener/AccessWidenerJarProcessor.java
@@ -65,7 +65,7 @@ public class AccessWidenerJarProcessor implements JarProcessor {
 		LoomGradleExtension extension = LoomGradleExtension.get(project);
 		Path awPath = extension.getAccessWidenerPath().get().getAsFile().toPath();
 
-		// Read our own mod's access widener, used later for producing a version remapped to intermediary
+		// Read our own mod's access widener, used later for producing a version remapped to calamus
 		try {
 			modAccessWidener = Files.readAllBytes(awPath);
 		} catch (NoSuchFileException e) {
diff --git a/src/main/java/net/fabricmc/loom/configuration/accesswidener/TransitiveAccessWidenerJarProcessor.java b/src/main/java/net/fabricmc/loom/configuration/accesswidener/TransitiveAccessWidenerJarProcessor.java
index 707158383f046e9bfa81b7b37affa5e9e09025ac..cbe08f8ee16a770e24f3475e5ec2cfd90810425a 100644
--- a/src/main/java/net/fabricmc/loom/configuration/accesswidener/TransitiveAccessWidenerJarProcessor.java
+++ b/src/main/java/net/fabricmc/loom/configuration/accesswidener/TransitiveAccessWidenerJarProcessor.java
@@ -141,14 +141,14 @@ public class TransitiveAccessWidenerJarProcessor implements JarProcessor {
 
 	private AccessWidener createAccessWidener() {
 		AccessWidener accessWidener = new AccessWidener();
-		// For other mods, only consider transitive AWs and remap from intermediary->named
+		// For other mods, only consider transitive AWs and remap from calamus->named
 		TinyRemapper tinyRemapper = createTinyRemapper();
 
 		try {
 			AccessWidenerRemapper remappingVisitor = new AccessWidenerRemapper(
 					accessWidener,
 					tinyRemapper.getEnvironment().getRemapper(),
-					MappingsNamespace.INTERMEDIARY.toString(),
+					MappingsNamespace.CALAMUS.toString(),
 					MappingsNamespace.NAMED.toString()
 			);
 			AccessWidenerReader transitiveReader = new AccessWidenerReader(new TransitiveOnlyFilter(remappingVisitor));
@@ -166,17 +166,17 @@ public class TransitiveAccessWidenerJarProcessor implements JarProcessor {
 
 	private TinyRemapper createTinyRemapper() {
 		try {
-			TinyRemapper tinyRemapper = TinyRemapperHelper.getTinyRemapper(project, "intermediary", "named");
+			TinyRemapper tinyRemapper = TinyRemapperHelper.getTinyRemapper(project, "calamus", "named");
 
 			tinyRemapper.readClassPath(TinyRemapperHelper.getMinecraftDependencies(project));
 
-			for (Path minecraftJar : extension.getMinecraftJars(MappingsNamespace.INTERMEDIARY)) {
+			for (Path minecraftJar : extension.getMinecraftJars(MappingsNamespace.CALAMUS)) {
 				tinyRemapper.readClassPath(minecraftJar);
 			}
 
 			return tinyRemapper;
 		} catch (IOException e) {
-			throw new RuntimeException("Failed to create tiny remapper for intermediary->named", e);
+			throw new RuntimeException("Failed to create tiny remapper for calamus->named", e);
 		}
 	}
 
diff --git a/src/main/java/net/fabricmc/loom/configuration/accesswidener/TransitiveAccessWidenerMappingsProcessor.java b/src/main/java/net/fabricmc/loom/configuration/accesswidener/TransitiveAccessWidenerMappingsProcessor.java
index da82d8f1d3fd02c6197a15e765765390217cab90..2de08db76cf209c47c2e5e433ad51f4e3042e459 100644
--- a/src/main/java/net/fabricmc/loom/configuration/accesswidener/TransitiveAccessWidenerMappingsProcessor.java
+++ b/src/main/java/net/fabricmc/loom/configuration/accesswidener/TransitiveAccessWidenerMappingsProcessor.java
@@ -48,8 +48,8 @@ public record TransitiveAccessWidenerMappingsProcessor(Project project) implemen
 			return false;
 		}
 
-		if (!MappingsNamespace.INTERMEDIARY.toString().equals(mappings.getSrcNamespace())) {
-			throw new IllegalStateException("Mapping tree must have intermediary src mappings not " + mappings.getSrcNamespace());
+		if (!MappingsNamespace.CALAMUS.toString().equals(mappings.getSrcNamespace())) {
+			throw new IllegalStateException("Mapping tree must have calamus src mappings not " + mappings.getSrcNamespace());
 		}
 
 		for (AccessWidenerFile accessWidener : accessWideners) {
diff --git a/src/main/java/net/fabricmc/loom/configuration/ifaceinject/InterfaceInjectionProcessor.java b/src/main/java/net/fabricmc/loom/configuration/ifaceinject/InterfaceInjectionProcessor.java
index 033211390944bb090942ed7d8f167bacb244e158..da192b332b633d5f92d85e4816e4ab28cd9c7277 100644
--- a/src/main/java/net/fabricmc/loom/configuration/ifaceinject/InterfaceInjectionProcessor.java
+++ b/src/main/java/net/fabricmc/loom/configuration/ifaceinject/InterfaceInjectionProcessor.java
@@ -108,7 +108,7 @@ public class InterfaceInjectionProcessor implements JarProcessor, GenerateSource
 
 	@Override
 	public void process(File jarFile) {
-		// Lazily remap from intermediary->named
+		// Lazily remap from calamus->named
 		if (remappedInjectedInterfaces == null) {
 			TinyRemapper tinyRemapper = createTinyRemapper();
 			Remapper remapper = tinyRemapper.getEnvironment().getRemapper();
@@ -228,8 +228,8 @@ public class InterfaceInjectionProcessor implements JarProcessor, GenerateSource
 			return false;
 		}
 
-		if (!MappingsNamespace.INTERMEDIARY.toString().equals(mappings.getSrcNamespace())) {
-			throw new IllegalStateException("Mapping tree must have intermediary src mappings not " + mappings.getSrcNamespace());
+		if (!MappingsNamespace.CALAMUS.toString().equals(mappings.getSrcNamespace())) {
+			throw new IllegalStateException("Mapping tree must have calamus src mappings not " + mappings.getSrcNamespace());
 		}
 
 		for (Map.Entry<String, List<InjectedInterface>> entry : injectedInterfaces.entrySet()) {
@@ -347,16 +347,16 @@ public class InterfaceInjectionProcessor implements JarProcessor, GenerateSource
 
 	private TinyRemapper createTinyRemapper() {
 		try {
-			TinyRemapper tinyRemapper = TinyRemapperHelper.getTinyRemapper(project, "intermediary", "named");
+			TinyRemapper tinyRemapper = TinyRemapperHelper.getTinyRemapper(project, "calamus", "named");
 			tinyRemapper.readClassPath(TinyRemapperHelper.getMinecraftDependencies(project));
 
-			for (Path minecraftJar : extension.getMinecraftJars(MappingsNamespace.INTERMEDIARY)) {
+			for (Path minecraftJar : extension.getMinecraftJars(MappingsNamespace.CALAMUS)) {
 				tinyRemapper.readClassPath(minecraftJar);
 			}
 
 			return tinyRemapper;
 		} catch (IOException e) {
-			throw new RuntimeException("Failed to create tiny remapper for intermediary->named", e);
+			throw new RuntimeException("Failed to create tiny remapper for calamus->named", e);
 		}
 	}
 
diff --git a/src/main/java/net/fabricmc/loom/configuration/mods/AccessWidenerUtils.java b/src/main/java/net/fabricmc/loom/configuration/mods/AccessWidenerUtils.java
index 3f463919bddc185f2567ac00f5a3df888ed3f148..39fb4d61df5fb74ce0cb916cd686566d66f1fef5 100644
--- a/src/main/java/net/fabricmc/loom/configuration/mods/AccessWidenerUtils.java
+++ b/src/main/java/net/fabricmc/loom/configuration/mods/AccessWidenerUtils.java
@@ -40,7 +40,7 @@ import net.fabricmc.loom.util.ZipUtils;
 
 public class AccessWidenerUtils {
 	/**
-	 * Remap a mods access widener from intermediary to named, so that loader can apply it in our dev-env.
+	 * Remap a mods access widener from calamus to named, so that loader can apply it in our dev-env.
 	 */
 	public static byte[] remapAccessWidener(byte[] input, Remapper remapper) {
 		int version = AccessWidenerReader.readVersion(input);
@@ -49,7 +49,7 @@ public class AccessWidenerUtils {
 		AccessWidenerRemapper awRemapper = new AccessWidenerRemapper(
 				writer,
 				remapper,
-				MappingsNamespace.INTERMEDIARY.toString(),
+				MappingsNamespace.CALAMUS.toString(),
 				MappingsNamespace.NAMED.toString()
 		);
 		AccessWidenerReader reader = new AccessWidenerReader(awRemapper);
diff --git a/src/main/java/net/fabricmc/loom/configuration/mods/ModConfigurationRemapper.java b/src/main/java/net/fabricmc/loom/configuration/mods/ModConfigurationRemapper.java
index 3f9f8bceb89b80709bd72eab4af0df5aa3a9bdb1..682ee24666a1fb34de1891de07367037958bcc48 100644
--- a/src/main/java/net/fabricmc/loom/configuration/mods/ModConfigurationRemapper.java
+++ b/src/main/java/net/fabricmc/loom/configuration/mods/ModConfigurationRemapper.java
@@ -71,7 +71,7 @@ public class ModConfigurationRemapper {
 		for (RemapConfigurationSettings entry : extension.getRemapConfigurations()) {
 			entry.getRemappedConfiguration().configure(remappedConfig -> {
 				/*
-				sourceConfig - The source configuration where the intermediary named artifacts come from. i.e "modApi"
+				sourceConfig - The source configuration where the calamus named artifacts come from. i.e "modApi"
 				remappedConfig - an intermediate configuration where the remapped artifacts go
 				targetConfig - extends from the remappedConfig, such as "api"
 				 */
diff --git a/src/main/java/net/fabricmc/loom/configuration/mods/ModProcessor.java b/src/main/java/net/fabricmc/loom/configuration/mods/ModProcessor.java
index a5998ff8cb7c47ccfc2bd8b697771f85855896e7..bdda13e57248cf06358873d3dea225a7ed656191 100644
--- a/src/main/java/net/fabricmc/loom/configuration/mods/ModProcessor.java
+++ b/src/main/java/net/fabricmc/loom/configuration/mods/ModProcessor.java
@@ -59,7 +59,7 @@ import net.fabricmc.tinyremapper.OutputConsumerPath;
 import net.fabricmc.tinyremapper.TinyRemapper;
 
 public class ModProcessor {
-	private static final String fromM = MappingsNamespace.INTERMEDIARY.toString();
+	private static final String fromM = MappingsNamespace.CALAMUS.toString();
 	private static final String toM = MappingsNamespace.NAMED.toString();
 
 	private final Project project;
@@ -111,7 +111,7 @@ public class ModProcessor {
 
 		final TinyRemapper remapper = builder.build();
 
-		for (Path minecraftJar : extension.getMinecraftJars(MappingsNamespace.INTERMEDIARY)) {
+		for (Path minecraftJar : extension.getMinecraftJars(MappingsNamespace.CALAMUS)) {
 			remapper.readClassPathAsync(minecraftJar);
 		}
 
diff --git a/src/main/java/net/fabricmc/loom/configuration/processors/ModJavadocProcessor.java b/src/main/java/net/fabricmc/loom/configuration/processors/ModJavadocProcessor.java
index b06447fe6660f3664a2febcdde0897840e15df33..100d8be779b35c8326f3589383c16530be96f0bf 100644
--- a/src/main/java/net/fabricmc/loom/configuration/processors/ModJavadocProcessor.java
+++ b/src/main/java/net/fabricmc/loom/configuration/processors/ModJavadocProcessor.java
@@ -142,8 +142,8 @@ public final class ModJavadocProcessor implements JarProcessor, GenerateSourcesT
 				MappingReader.read(reader, mappings);
 			}
 
-			if (!mappings.getSrcNamespace().equals(MappingsNamespace.INTERMEDIARY.toString())) {
-				throw new IllegalStateException("Javadoc provided by mod (%s) must be have an intermediary source namespace".formatted(modId));
+			if (!mappings.getSrcNamespace().equals(MappingsNamespace.CALAMUS.toString())) {
+				throw new IllegalStateException("Javadoc provided by mod (%s) must be have an calamus source namespace".formatted(modId));
 			}
 
 			if (!mappings.getDstNamespaces().isEmpty()) {
diff --git a/src/main/java/net/fabricmc/loom/configuration/providers/mappings/IntermediaryMappingsProvider.java b/src/main/java/net/fabricmc/loom/configuration/providers/mappings/IntermediaryMappingsProvider.java
index d7aeb51f2f38458f5969f928684a448c057007fc..8fe157e0da5f8cda5433b23a73a48283ac1ba0fd 100644
--- a/src/main/java/net/fabricmc/loom/configuration/providers/mappings/IntermediaryMappingsProvider.java
+++ b/src/main/java/net/fabricmc/loom/configuration/providers/mappings/IntermediaryMappingsProvider.java
@@ -49,12 +49,12 @@ public abstract class IntermediaryMappingsProvider extends IntermediateMappingsP
 			return;
 		}
 
-		// Download and extract intermediary
+		// Download and extract calamus
 		final Path intermediaryJarPath = Files.createTempFile(getName(), ".jar");
 		final String encodedMcVersion = UrlEscapers.urlFragmentEscaper().escape(getMinecraftVersion().get());
 		final String url = getIntermediaryUrl().get().formatted(encodedMcVersion);
 
-		LOGGER.info("Downloading intermediary from {}", url);
+		LOGGER.info("Downloading calamus from {}", url);
 
 		Files.deleteIfExists(tinyMappings);
 		Files.deleteIfExists(intermediaryJarPath);
@@ -68,6 +68,6 @@ public abstract class IntermediaryMappingsProvider extends IntermediateMappingsP
 
 	@Override
 	public @NotNull String getName() {
-		return "intermediary-v2";
+		return "calamus-v2";
 	}
 }
diff --git a/src/main/java/net/fabricmc/loom/configuration/providers/mappings/IntermediateMappingsService.java b/src/main/java/net/fabricmc/loom/configuration/providers/mappings/IntermediateMappingsService.java
index 13b1427cc6ccbddb612b88afd9372a1f8b784f0d..34a9fb5ebf2e23ed115b4bac7423515da800453f 100644
--- a/src/main/java/net/fabricmc/loom/configuration/providers/mappings/IntermediateMappingsService.java
+++ b/src/main/java/net/fabricmc/loom/configuration/providers/mappings/IntermediateMappingsService.java
@@ -87,13 +87,13 @@ public final class IntermediateMappingsService implements SharedService {
 		final MemoryMappingTree tree = new MemoryMappingTree();
 
 		try {
-			MappingNsCompleter nsCompleter = new MappingNsCompleter(tree, Collections.singletonMap(MappingsNamespace.NAMED.toString(), MappingsNamespace.INTERMEDIARY.toString()), true);
+			MappingNsCompleter nsCompleter = new MappingNsCompleter(tree, Collections.singletonMap(MappingsNamespace.NAMED.toString(), MappingsNamespace.CALAMUS.toString()), true);
 
 			try (BufferedReader reader = Files.newBufferedReader(getIntermediaryTiny(), StandardCharsets.UTF_8)) {
 				Tiny2Reader.read(reader, nsCompleter);
 			}
 		} catch (IOException e) {
-			throw new UncheckedIOException("Failed to read intermediary mappings", e);
+			throw new UncheckedIOException("Failed to read calamus mappings", e);
 		}
 
 		return tree;
@@ -104,6 +104,6 @@ public final class IntermediateMappingsService implements SharedService {
 	}
 
 	public Path getIntermediaryTiny() {
-		return Objects.requireNonNull(intermediaryTiny, "Intermediary mappings have not been setup");
+		return Objects.requireNonNull(intermediaryTiny, "Calamus mappings have not been setup");
 	}
 }
diff --git a/src/main/java/net/fabricmc/loom/configuration/providers/mappings/LayeredMappingSpecBuilderImpl.java b/src/main/java/net/fabricmc/loom/configuration/providers/mappings/LayeredMappingSpecBuilderImpl.java
index 26dd21b910a8789d817ff4048aa0a0d5740f6327..b431f6d352c3c4ef1de103b9a822a72570f82d62 100644
--- a/src/main/java/net/fabricmc/loom/configuration/providers/mappings/LayeredMappingSpecBuilderImpl.java
+++ b/src/main/java/net/fabricmc/loom/configuration/providers/mappings/LayeredMappingSpecBuilderImpl.java
@@ -79,7 +79,7 @@ public class LayeredMappingSpecBuilderImpl implements LayeredMappingSpecBuilder
 
 	public LayeredMappingSpec build() {
 		List<MappingsSpec<?>> builtLayers = new LinkedList<>();
-		// Intermediary is always the base layer
+		// Calamus is always the base layer
 		builtLayers.add(new IntermediaryMappingsSpec());
 		builtLayers.addAll(layers);
 
diff --git a/src/main/java/net/fabricmc/loom/configuration/providers/mappings/LayeredMappingsDependency.java b/src/main/java/net/fabricmc/loom/configuration/providers/mappings/LayeredMappingsDependency.java
index 0b3be679c39d6a6886e613b045696eef25e610a8..efe3e17aab5fc3b7c5c8dcff13e41b7fb67947b6 100644
--- a/src/main/java/net/fabricmc/loom/configuration/providers/mappings/LayeredMappingsDependency.java
+++ b/src/main/java/net/fabricmc/loom/configuration/providers/mappings/LayeredMappingsDependency.java
@@ -101,7 +101,7 @@ public class LayeredMappingsDependency implements SelfResolvingDependency, FileC
 			Tiny2Writer tiny2Writer = new Tiny2Writer(writer, false);
 
 			MappingDstNsReorder nsReorder = new MappingDstNsReorder(tiny2Writer, Collections.singletonList(MappingsNamespace.NAMED.toString()));
-			MappingSourceNsSwitch nsSwitch = new MappingSourceNsSwitch(nsReorder, MappingsNamespace.INTERMEDIARY.toString(), true);
+			MappingSourceNsSwitch nsSwitch = new MappingSourceNsSwitch(nsReorder, MappingsNamespace.CALAMUS.toString(), true);
 			mappings.accept(nsSwitch);
 
 			Files.deleteIfExists(mappingsFile);
diff --git a/src/main/java/net/fabricmc/loom/configuration/providers/mappings/NoOpIntermediateMappingsProvider.java b/src/main/java/net/fabricmc/loom/configuration/providers/mappings/NoOpIntermediateMappingsProvider.java
index 28ddfc637875241412f847fd9acdc87c79e32e0c..6e21742f2ad6f865152dcf24e74515458d6a5b1d 100644
--- a/src/main/java/net/fabricmc/loom/configuration/providers/mappings/NoOpIntermediateMappingsProvider.java
+++ b/src/main/java/net/fabricmc/loom/configuration/providers/mappings/NoOpIntermediateMappingsProvider.java
@@ -34,10 +34,10 @@ import org.jetbrains.annotations.NotNull;
 import net.fabricmc.loom.api.mappings.intermediate.IntermediateMappingsProvider;
 
 /**
- * A bit of a hack, creates an empty intermediary mapping file to be used for mc versions without any intermediate mappings.
+ * A bit of a hack, creates an empty calamus mapping file to be used for mc versions without any intermediate mappings.
  */
 public abstract class NoOpIntermediateMappingsProvider extends IntermediateMappingsProvider {
-	private static final String HEADER = "tiny\t2\t0\tofficial\tintermediary";
+	private static final String HEADER = "tiny\t2\t0\tofficial\tcalamus";
 
 	@Override
 	public void provide(Path tinyMappings) throws IOException {
diff --git a/src/main/java/net/fabricmc/loom/configuration/providers/mappings/file/FileMappingsSpecBuilderImpl.java b/src/main/java/net/fabricmc/loom/configuration/providers/mappings/file/FileMappingsSpecBuilderImpl.java
index 441d51203b4d99cfe534cc11aaf6b3936191ec9d..b4617b25c7bfb8ba7c8813c00e7493104e9af6c9 100644
--- a/src/main/java/net/fabricmc/loom/configuration/providers/mappings/file/FileMappingsSpecBuilderImpl.java
+++ b/src/main/java/net/fabricmc/loom/configuration/providers/mappings/file/FileMappingsSpecBuilderImpl.java
@@ -38,11 +38,11 @@ public class FileMappingsSpecBuilderImpl implements FileMappingsSpecBuilder {
 
 	private final FileSpec fileSpec;
 	private String mappingPath = DEFAULT_MAPPING_PATH;
-	private String fallbackSourceNamespace = MappingsNamespace.INTERMEDIARY.toString();
+	private String fallbackSourceNamespace = MappingsNamespace.CALAMUS.toString();
 	private String fallbackTargetNamespace = MappingsNamespace.NAMED.toString();
 	private boolean enigma = false;
 	private boolean unpick = false;
-	private String mergeNamespace = MappingsNamespace.INTERMEDIARY.toString();
+	private String mergeNamespace = MappingsNamespace.CALAMUS.toString();
 
 	private FileMappingsSpecBuilderImpl(FileSpec fileSpec) {
 		this.fileSpec = fileSpec;
@@ -88,7 +88,7 @@ public class FileMappingsSpecBuilderImpl implements FileMappingsSpecBuilder {
 		Objects.requireNonNull(namespace, "merge namespace cannot be null");
 
 		if (MappingsNamespace.of(namespace) == null) {
-			throw new IllegalArgumentException("Namespace '" + namespace + "' is unsupported! It must be either 'official', 'intermediary' or 'named'.");
+			throw new IllegalArgumentException("Namespace '" + namespace + "' is unsupported! It must be either 'official', 'calamus' or 'named'.");
 		}
 
 		mergeNamespace = namespace;
diff --git a/src/main/java/net/fabricmc/loom/configuration/providers/mappings/intermediary/IntermediaryMappingLayer.java b/src/main/java/net/fabricmc/loom/configuration/providers/mappings/intermediary/IntermediaryMappingLayer.java
index cfd0ee32eae1904dbfe169f8e1da602e3eb7871b..f9dab485daf6ee89a9af427170f8f277a61f3edb 100644
--- a/src/main/java/net/fabricmc/loom/configuration/providers/mappings/intermediary/IntermediaryMappingLayer.java
+++ b/src/main/java/net/fabricmc/loom/configuration/providers/mappings/intermediary/IntermediaryMappingLayer.java
@@ -42,8 +42,8 @@ public record IntermediaryMappingLayer(Supplier<MemoryMappingTree> memoryMapping
 
 	@Override
 	public void visit(MappingVisitor mappingVisitor) throws IOException {
-		// Populate named with intermediary and add Add a "named" namespace
-		MappingNsCompleter nsCompleter = new MappingNsCompleter(mappingVisitor, Collections.singletonMap(MappingsNamespace.NAMED.toString(), MappingsNamespace.INTERMEDIARY.toString()), true);
+		// Populate named with calamus and add Add a "named" namespace
+		MappingNsCompleter nsCompleter = new MappingNsCompleter(mappingVisitor, Collections.singletonMap(MappingsNamespace.NAMED.toString(), MappingsNamespace.CALAMUS.toString()), true);
 
 		memoryMappingTree.get().accept(nsCompleter);
 	}
diff --git a/src/main/java/net/fabricmc/loom/configuration/providers/mappings/tiny/MappingsMerger.java b/src/main/java/net/fabricmc/loom/configuration/providers/mappings/tiny/MappingsMerger.java
index 5988f143d4df30c6f1df225552b35ae420ef97f9..7576d26194ab923fee7a27507656323cfdc32c4c 100644
--- a/src/main/java/net/fabricmc/loom/configuration/providers/mappings/tiny/MappingsMerger.java
+++ b/src/main/java/net/fabricmc/loom/configuration/providers/mappings/tiny/MappingsMerger.java
@@ -54,14 +54,14 @@ public final class MappingsMerger {
 		LOGGER.info(":merging mappings");
 
 		MemoryMappingTree intermediaryTree = new MemoryMappingTree();
-		intermediateMappingsService.getMemoryMappingTree().accept(new MappingSourceNsSwitch(intermediaryTree, MappingsNamespace.INTERMEDIARY.toString()));
+		intermediateMappingsService.getMemoryMappingTree().accept(new MappingSourceNsSwitch(intermediaryTree, MappingsNamespace.CALAMUS.toString()));
 
 		try (BufferedReader reader = Files.newBufferedReader(from, StandardCharsets.UTF_8)) {
 			Tiny2Reader.read(reader, intermediaryTree);
 		}
 
 		MemoryMappingTree officialTree = new MemoryMappingTree();
-		MappingNsCompleter nsCompleter = new MappingNsCompleter(officialTree, Map.of(MappingsNamespace.OFFICIAL.toString(), MappingsNamespace.INTERMEDIARY.toString()));
+		MappingNsCompleter nsCompleter = new MappingNsCompleter(officialTree, Map.of(MappingsNamespace.OFFICIAL.toString(), MappingsNamespace.CALAMUS.toString()));
 		MappingSourceNsSwitch nsSwitch = new MappingSourceNsSwitch(nsCompleter, MappingsNamespace.OFFICIAL.toString());
 		intermediaryTree.accept(nsSwitch);
 
@@ -79,10 +79,10 @@ public final class MappingsMerger {
 	 * Currently, Yarn does not export mappings for these inner classes.
 	 */
 	private static void inheritMappedNamesOfEnclosingClasses(MemoryMappingTree tree) {
-		int intermediaryIdx = tree.getNamespaceId("intermediary");
+		int intermediaryIdx = tree.getNamespaceId("calamus");
 		int namedIdx = tree.getNamespaceId("named");
 
-		// The tree does not have an index by intermediary names by default
+		// The tree does not have an index by calamus names by default
 		tree.setIndexByDstNames(true);
 
 		for (MappingTree.ClassMapping classEntry : tree.getClasses()) {
diff --git a/src/main/java/net/fabricmc/loom/configuration/providers/minecraft/SignatureFixerApplyVisitor.java b/src/main/java/net/fabricmc/loom/configuration/providers/minecraft/SignatureFixerApplyVisitor.java
index 0ebff3467f061b62e328eb4cc339533fb2e4caad..0fab7b1ea899edbfc1c4aaaa90aaf43535bbf435 100644
--- a/src/main/java/net/fabricmc/loom/configuration/providers/minecraft/SignatureFixerApplyVisitor.java
+++ b/src/main/java/net/fabricmc/loom/configuration/providers/minecraft/SignatureFixerApplyVisitor.java
@@ -62,13 +62,13 @@ public record SignatureFixerApplyVisitor(Map<String, String> signatureFixes) imp
 		}
 
 		if (toIntermediary) {
-			// No need to remap, as these are already intermediary
+			// No need to remap, as these are already calamus
 			return mappingsProvider.getSignatureFixes();
 		}
 
-		// Remap the sig fixes from intermediary to the target namespace
+		// Remap the sig fixes from calamus to the target namespace
 		final Map<String, String> remapped = new HashMap<>();
-		final TinyRemapper sigTinyRemapper = TinyRemapperHelper.getTinyRemapper(project, MappingsNamespace.INTERMEDIARY.toString(), targetNamespace);
+		final TinyRemapper sigTinyRemapper = TinyRemapperHelper.getTinyRemapper(project, MappingsNamespace.CALAMUS.toString(), targetNamespace);
 		final Remapper sigAsmRemapper = sigTinyRemapper.getEnvironment().getRemapper();
 
 		// Remap the class names and the signatures using a new tiny remapper instance.
diff --git a/src/main/java/net/fabricmc/loom/configuration/providers/minecraft/mapped/AbstractMappedMinecraftProvider.java b/src/main/java/net/fabricmc/loom/configuration/providers/minecraft/mapped/AbstractMappedMinecraftProvider.java
index d74b8c876bf50fb4e778e013c2dc3b42e6874d73..eed9df341fb2d7bf3ae13503ef881abde2647864 100644
--- a/src/main/java/net/fabricmc/loom/configuration/providers/minecraft/mapped/AbstractMappedMinecraftProvider.java
+++ b/src/main/java/net/fabricmc/loom/configuration/providers/minecraft/mapped/AbstractMappedMinecraftProvider.java
@@ -130,7 +130,7 @@ public abstract class AbstractMappedMinecraftProvider<M extends MinecraftProvide
 
 		Files.deleteIfExists(remappedJars.outputJar());
 
-		final Map<String, String> remappedSignatures = SignatureFixerApplyVisitor.getRemappedSignatures(getTargetNamespace() == MappingsNamespace.INTERMEDIARY, mappingsProvider, project, toM);
+		final Map<String, String> remappedSignatures = SignatureFixerApplyVisitor.getRemappedSignatures(getTargetNamespace() == MappingsNamespace.CALAMUS, mappingsProvider, project, toM);
 		TinyRemapper remapper = TinyRemapperHelper.getTinyRemapper(project, fromM, toM, true, (builder) -> {
 			builder.extraPostApplyVisitor(new SignatureFixerApplyVisitor(remappedSignatures));
 			configureRemapper(remappedJars, builder);
diff --git a/src/main/java/net/fabricmc/loom/configuration/providers/minecraft/mapped/IntermediaryMinecraftProvider.java b/src/main/java/net/fabricmc/loom/configuration/providers/minecraft/mapped/IntermediaryMinecraftProvider.java
index b6a56ee4a3a4a99ef965e75a9d3a615ce79aaaa6..2a85805afe5dc94904f5404bfae64157967b7310 100644
--- a/src/main/java/net/fabricmc/loom/configuration/providers/minecraft/mapped/IntermediaryMinecraftProvider.java
+++ b/src/main/java/net/fabricmc/loom/configuration/providers/minecraft/mapped/IntermediaryMinecraftProvider.java
@@ -49,7 +49,7 @@ public abstract sealed class IntermediaryMinecraftProvider<M extends MinecraftPr
 
 	@Override
 	public final MappingsNamespace getTargetNamespace() {
-		return MappingsNamespace.INTERMEDIARY;
+		return MappingsNamespace.CALAMUS;
 	}
 
 	public static final class MergedImpl extends IntermediaryMinecraftProvider<MergedMinecraftProvider> implements Merged {
diff --git a/src/main/java/net/fabricmc/loom/extension/LoomGradleExtensionImpl.java b/src/main/java/net/fabricmc/loom/extension/LoomGradleExtensionImpl.java
index a81a6d29c59ad19e182f592d0cb75492168348bd..5b1ac52087c0123b4b4a90a2190ea87d60ce0fa1 100644
--- a/src/main/java/net/fabricmc/loom/extension/LoomGradleExtensionImpl.java
+++ b/src/main/java/net/fabricmc/loom/extension/LoomGradleExtensionImpl.java
@@ -152,7 +152,7 @@ public class LoomGradleExtensionImpl extends LoomGradleExtensionApiImpl implemen
 
 	@Override
 	public IntermediaryMinecraftProvider<?> getIntermediaryMinecraftProvider() {
-		return Objects.requireNonNull(intermediaryMinecraftProvider, "Cannot get IntermediaryMinecraftProvider before it has been setup");
+		return Objects.requireNonNull(intermediaryMinecraftProvider, "Cannot get CalamusMinecraftProvider before it has been setup");
 	}
 
 	@Override
diff --git a/src/main/java/net/fabricmc/loom/extension/MixinExtensionApiImpl.java b/src/main/java/net/fabricmc/loom/extension/MixinExtensionApiImpl.java
index 386aab8a18dd8d4546939a6cf857d3a5de6cada9..f2113124247195181c914c3fc360ceb2127af65b 100644
--- a/src/main/java/net/fabricmc/loom/extension/MixinExtensionApiImpl.java
+++ b/src/main/java/net/fabricmc/loom/extension/MixinExtensionApiImpl.java
@@ -52,7 +52,7 @@ public abstract class MixinExtensionApiImpl implements MixinExtensionAPI {
 				.convention(true);
 
 		this.refmapTargetNamespace = project.getObjects().property(String.class)
-				.convention(MappingsNamespace.INTERMEDIARY.toString());
+				.convention(MappingsNamespace.CALAMUS.toString());
 		this.refmapTargetNamespace.finalizeValueOnRead();
 
 		this.messages = project.getObjects().mapProperty(String.class, String.class);
diff --git a/src/main/java/net/fabricmc/loom/task/AbstractRemapJarTask.java b/src/main/java/net/fabricmc/loom/task/AbstractRemapJarTask.java
index 053d8ec54e54d760ef03e57ddd818f3718f292b3..68648e976b778aafc1a2a47d3836047159f7274d 100644
--- a/src/main/java/net/fabricmc/loom/task/AbstractRemapJarTask.java
+++ b/src/main/java/net/fabricmc/loom/task/AbstractRemapJarTask.java
@@ -95,7 +95,7 @@ public abstract class AbstractRemapJarTask extends Jar {
 	@Inject
 	public AbstractRemapJarTask() {
 		getSourceNamespace().convention(MappingsNamespace.NAMED.toString()).finalizeValueOnRead();
-		getTargetNamespace().convention(MappingsNamespace.INTERMEDIARY.toString()).finalizeValueOnRead();
+		getTargetNamespace().convention(MappingsNamespace.CALAMUS.toString()).finalizeValueOnRead();
 		getRemapperIsolation().convention(false).finalizeValueOnRead();
 		getIncludesClientOnlyClasses().convention(false).finalizeValueOnRead();
 	}
diff --git a/src/main/java/net/fabricmc/loom/task/GenerateSourcesTask.java b/src/main/java/net/fabricmc/loom/task/GenerateSourcesTask.java
index 2031892d7e99fc28be7459dd182a7d603c7f2b79..f77cc14bb124fc84426141cf00f4c89d35b96426 100644
--- a/src/main/java/net/fabricmc/loom/task/GenerateSourcesTask.java
+++ b/src/main/java/net/fabricmc/loom/task/GenerateSourcesTask.java
@@ -323,7 +323,7 @@ public abstract class GenerateSourcesTask extends AbstractLoomTask {
 		MemoryMappingTree mappingTree = new MemoryMappingTree();
 
 		try (Reader reader = Files.newBufferedReader(inputMappings, StandardCharsets.UTF_8)) {
-			MappingReader.read(reader, new MappingSourceNsSwitch(mappingTree, MappingsNamespace.INTERMEDIARY.toString()));
+			MappingReader.read(reader, new MappingSourceNsSwitch(mappingTree, MappingsNamespace.CALAMUS.toString()));
 		} catch (IOException e) {
 			throw new RuntimeException("Failed to read mappings", e);
 		}
diff --git a/src/main/java/net/fabricmc/loom/task/MigrateMappingsTask.java b/src/main/java/net/fabricmc/loom/task/MigrateMappingsTask.java
index f2b830bede2dff051244baab7d3b82827e364bba..f4b30d7d9f4599eedf8a4678143332fccaa056e0 100644
--- a/src/main/java/net/fabricmc/loom/task/MigrateMappingsTask.java
+++ b/src/main/java/net/fabricmc/loom/task/MigrateMappingsTask.java
@@ -174,7 +174,7 @@ public abstract class MigrateMappingsTask extends AbstractLoomTask {
 		MappingSet mappingSet = new TinyMappingsJoiner(
 				currentMappings, MappingsNamespace.NAMED.toString(),
 				targetMappings, MappingsNamespace.NAMED.toString(),
-				MappingsNamespace.INTERMEDIARY.toString()
+				MappingsNamespace.CALAMUS.toString()
 		).read();
 
 		project.getLogger().lifecycle(":remapping");
@@ -183,7 +183,7 @@ public abstract class MigrateMappingsTask extends AbstractLoomTask {
 		final JavaVersion javaVersion = project.getExtensions().getByType(JavaPluginExtension.class).getSourceCompatibility();
 		mercury.setSourceCompatibility(javaVersion.toString());
 
-		for (Path intermediaryJar : extension.getMinecraftJars(MappingsNamespace.INTERMEDIARY)) {
+		for (Path intermediaryJar : extension.getMinecraftJars(MappingsNamespace.CALAMUS)) {
 			mercury.getClassPath().add(intermediaryJar);
 		}
 
diff --git a/src/main/java/net/fabricmc/loom/task/RemapTaskConfiguration.java b/src/main/java/net/fabricmc/loom/task/RemapTaskConfiguration.java
index 63702a3298a3a88466e991929429e7c2168b6bc0..f4e60323a554257d44efb33ec3a585dffe1fd46c 100644
--- a/src/main/java/net/fabricmc/loom/task/RemapTaskConfiguration.java
+++ b/src/main/java/net/fabricmc/loom/task/RemapTaskConfiguration.java
@@ -60,7 +60,7 @@ public class RemapTaskConfiguration {
 
 			// Basic task setup
 			task.dependsOn(jarTask);
-			task.setDescription("Remaps the built project jar to intermediary mappings.");
+			task.setDescription("Remaps the built project jar to calamus mappings.");
 			task.setGroup(Constants.TaskGroup.FABRIC);
 			project.getArtifacts().add(JavaPlugin.API_ELEMENTS_CONFIGURATION_NAME, task);
 			project.getArtifacts().add(JavaPlugin.RUNTIME_ELEMENTS_CONFIGURATION_NAME, task);
@@ -104,7 +104,7 @@ public class RemapTaskConfiguration {
 		final String sourcesJarTaskName = SourceSetHelper.getMainSourceSet(project).getSourcesJarTaskName();
 
 		TaskProvider<RemapSourcesJarTask> remapSourcesTask = tasks.register(REMAP_SOURCES_JAR_TASK_NAME, RemapSourcesJarTask.class, task -> {
-			task.setDescription("Remaps the default sources jar to intermediary mappings.");
+			task.setDescription("Remaps the default sources jar to calamus mappings.");
 			task.setGroup(Constants.TaskGroup.FABRIC);
 
 			final Task sourcesTask = project.getTasks().findByName(sourcesJarTaskName);
diff --git a/src/main/java/net/fabricmc/loom/task/ValidateMixinNameTask.java b/src/main/java/net/fabricmc/loom/task/ValidateMixinNameTask.java
index 8093e04bb4c38cdd2d4ee4875981594d098d8b06..b987f63d2eec1b1197b648dcd6a439841341419b 100644
--- a/src/main/java/net/fabricmc/loom/task/ValidateMixinNameTask.java
+++ b/src/main/java/net/fabricmc/loom/task/ValidateMixinNameTask.java
@@ -119,7 +119,7 @@ public abstract class ValidateMixinNameTask extends SourceTask {
 				final String expectedMixinClassName = mixin.expectedClassName();
 
 				if (expectedMixinClassName.startsWith("class_")) {
-					// Don't enforce intermediary named mixins.
+					// Don't enforce calamus named mixins.
 					continue;
 				}
 
diff --git a/src/main/java/net/fabricmc/loom/task/launch/GenerateRemapClasspathTask.java b/src/main/java/net/fabricmc/loom/task/launch/GenerateRemapClasspathTask.java
index 8077cd35bd12af577d2bea517b6192008d3b7f4d..ffa0e2c7c3f838fe03c89930cba08e23d8e13996 100644
--- a/src/main/java/net/fabricmc/loom/task/launch/GenerateRemapClasspathTask.java
+++ b/src/main/java/net/fabricmc/loom/task/launch/GenerateRemapClasspathTask.java
@@ -67,7 +67,7 @@ public abstract class GenerateRemapClasspathTask extends AbstractLoomTask {
 	public void run() {
 		final List<File> remapClasspath = new ArrayList<>(getRemapClasspath().getFiles());
 
-		for (Path minecraftJar : getExtension().getMinecraftJars(MappingsNamespace.INTERMEDIARY)) {
+		for (Path minecraftJar : getExtension().getMinecraftJars(MappingsNamespace.CALAMUS)) {
 			remapClasspath.add(minecraftJar.toFile());
 		}
 
diff --git a/src/main/java/net/fabricmc/loom/util/Constants.java b/src/main/java/net/fabricmc/loom/util/Constants.java
index f5e694ea750ab9b3c67a2946146cd105908ecc8c..d89437e34581aa3ce53925b6e79e80c3ec70d153 100644
--- a/src/main/java/net/fabricmc/loom/util/Constants.java
+++ b/src/main/java/net/fabricmc/loom/util/Constants.java
@@ -106,8 +106,8 @@ public class Constants {
 	}
 
 	public static final class MixinArguments {
-		public static final String IN_MAP_FILE_NAMED_INTERMEDIARY = "inMapFileNamedIntermediary";
-		public static final String OUT_MAP_FILE_NAMED_INTERMEDIARY = "outMapFileNamedIntermediary";
+		public static final String IN_MAP_FILE_NAMED_CALAMUS = "inMapFileNamedCalamus";
+		public static final String OUT_MAP_FILE_NAMED_CALAMUS = "outMapFileNamedCalamus";
 		public static final String OUT_REFMAP_FILE = "outRefMapFile";
 		public static final String DEFAULT_OBFUSCATION_ENV = "defaultObfuscationEnv";
 		public static final String QUIET = "quiet";
diff --git a/src/main/java/net/fabricmc/loom/util/SourceRemapper.java b/src/main/java/net/fabricmc/loom/util/SourceRemapper.java
index 4c069aea7852903f862a87b4da5d78b8237e7a46..7f32883417dca5620d0fa3ba2cd22a6c08fa4bf7 100644
--- a/src/main/java/net/fabricmc/loom/util/SourceRemapper.java
+++ b/src/main/java/net/fabricmc/loom/util/SourceRemapper.java
@@ -163,8 +163,8 @@ public class SourceRemapper {
 		MappingSet mappings = extension.getOrCreateSrcMappingCache(toNamed ? 1 : 0, () -> {
 			try {
 				MemoryMappingTree m = mappingsProvider.getMappings();
-				project.getLogger().info(":loading " + (toNamed ? "intermediary -> named" : "named -> intermediary") + " source mappings");
-				return new TinyMappingsReader(m, toNamed ? MappingsNamespace.INTERMEDIARY.toString() : MappingsNamespace.NAMED.toString(), toNamed ? MappingsNamespace.NAMED.toString() : MappingsNamespace.INTERMEDIARY.toString()).read();
+				project.getLogger().info(":loading " + (toNamed ? "calamus -> named" : "named -> calamus") + " source mappings");
+				return new TinyMappingsReader(m, toNamed ? MappingsNamespace.CALAMUS.toString() : MappingsNamespace.NAMED.toString(), toNamed ? MappingsNamespace.NAMED.toString() : MappingsNamespace.CALAMUS.toString()).read();
 			} catch (Exception e) {
 				throw new RuntimeException(e);
 			}
@@ -181,7 +181,7 @@ public class SourceRemapper {
 				}
 			}
 
-			for (Path intermediaryJar : extension.getMinecraftJars(MappingsNamespace.INTERMEDIARY)) {
+			for (Path intermediaryJar : extension.getMinecraftJars(MappingsNamespace.CALAMUS)) {
 				m.getClassPath().add(intermediaryJar);
 			}
 
diff --git a/src/main/java/net/fabricmc/loom/util/TinyRemapperHelper.java b/src/main/java/net/fabricmc/loom/util/TinyRemapperHelper.java
index de9c82e8320ccfb2fa634197f30c329f1e2859ac..f344143e7ccc483b51df91201842eff15d8cfdbd 100644
--- a/src/main/java/net/fabricmc/loom/util/TinyRemapperHelper.java
+++ b/src/main/java/net/fabricmc/loom/util/TinyRemapperHelper.java
@@ -72,7 +72,7 @@ public final class TinyRemapperHelper {
 			throw new IllegalStateException("Mappings src namespace must match remap src namespace");
 		}
 
-		int intermediaryNsId = mappingTree.getNamespaceId(MappingsNamespace.INTERMEDIARY.toString());
+		int intermediaryNsId = mappingTree.getNamespaceId(MappingsNamespace.CALAMUS.toString());
 
 		TinyRemapper.Builder builder = TinyRemapper.newRemapper()
 				.withMappings(create(mappingTree, fromM, toM, true))
diff --git a/src/test/groovy/net/fabricmc/loom/test/unit/layeredmappings/FileMappingLayerTest.groovy b/src/test/groovy/net/fabricmc/loom/test/unit/layeredmappings/FileMappingLayerTest.groovy
index 37e7352e05c244b2202d1fd6b357df4f645d4d03..a47fdb321b822f80a43f833e047d7200abf76154 100644
--- a/src/test/groovy/net/fabricmc/loom/test/unit/layeredmappings/FileMappingLayerTest.groovy
+++ b/src/test/groovy/net/fabricmc/loom/test/unit/layeredmappings/FileMappingLayerTest.groovy
@@ -52,7 +52,7 @@ class FileMappingLayerTest extends LayeredMappingsSpecification {
 			)
 		then:
 			mappings.srcNamespace == "named"
-			mappings.dstNamespaces == ["intermediary", "official"]
+			mappings.dstNamespaces == ["calamus", "official"]
 			mappings.classes.size() == 6111
 			mappings.classes[0].srcName == "net/minecraft/block/FenceBlock"
 			mappings.classes[0].getDstName(0) == "net/minecraft/class_2354"
@@ -85,7 +85,7 @@ class FileMappingLayerTest extends LayeredMappingsSpecification {
 			def tiny = getTiny(mappings)
 		then:
 			mappings.srcNamespace == "named"
-			mappings.dstNamespaces == ["intermediary", "official"]
+			mappings.dstNamespaces == ["calamus", "official"]
 			mappings.classes.size() == 6113
 			mappings.classes[0].srcName.hashCode() == 1869546970 // MojMap name, just check the hash
 			mappings.classes[0].getDstName(0) == "net/minecraft/class_2354"
diff --git a/src/test/groovy/net/fabricmc/loom/test/unit/layeredmappings/IntermediaryMappingLayerTest.groovy b/src/test/groovy/net/fabricmc/loom/test/unit/layeredmappings/IntermediaryMappingLayerTest.groovy
index 0f6c416110c0234a4a4e6d795372436a6da98173..878d4dc0d2abb34c339d544b227f99d3edca7e99 100644
--- a/src/test/groovy/net/fabricmc/loom/test/unit/layeredmappings/IntermediaryMappingLayerTest.groovy
+++ b/src/test/groovy/net/fabricmc/loom/test/unit/layeredmappings/IntermediaryMappingLayerTest.groovy
@@ -27,7 +27,7 @@ package net.fabricmc.loom.test.unit.layeredmappings
 import net.fabricmc.loom.configuration.providers.mappings.intermediary.IntermediaryMappingsSpec
 
 class IntermediaryMappingLayerTest extends LayeredMappingsSpecification {
-    def "Read intermediary mappings" () {
+    def "Read calamus mappings" () {
         setup:
             intermediaryUrl = INTERMEDIARY_1_17_URL
         when:
@@ -35,7 +35,7 @@ class IntermediaryMappingLayerTest extends LayeredMappingsSpecification {
             def tiny = getTiny(mappings)
         then:
             mappings.srcNamespace == "official"
-            mappings.dstNamespaces == ["intermediary", "named"]
+            mappings.dstNamespaces == ["calamus", "named"]
             mappings.classes.size() == 6107
             mappings.getClass("abc").getDstName(0) == "net/minecraft/class_3191"
             mappings.getClass("abc").getDstName(1) == "net/minecraft/class_3191"
diff --git a/src/test/groovy/net/fabricmc/loom/test/unit/layeredmappings/LayeredMappingsSpecification.groovy b/src/test/groovy/net/fabricmc/loom/test/unit/layeredmappings/LayeredMappingsSpecification.groovy
index da3d5b56ca1c71eb3c1f1cb47d24f0c4f7400358..da4369a8133a54ca5fbd7c2a89eac670e47cb31c 100644
--- a/src/test/groovy/net/fabricmc/loom/test/unit/layeredmappings/LayeredMappingsSpecification.groovy
+++ b/src/test/groovy/net/fabricmc/loom/test/unit/layeredmappings/LayeredMappingsSpecification.groovy
@@ -106,7 +106,7 @@ abstract class LayeredMappingsSpecification extends Specification implements Lay
     MemoryMappingTree reorder(MemoryMappingTree mappingTree) {
         def reorderedMappings = new MemoryMappingTree()
         def nsReorder = new MappingDstNsReorder(reorderedMappings, Collections.singletonList(MappingsNamespace.NAMED.toString()))
-        def nsSwitch = new MappingSourceNsSwitch(nsReorder, MappingsNamespace.INTERMEDIARY.toString(), true)
+        def nsSwitch = new MappingSourceNsSwitch(nsReorder, MappingsNamespace.CALAMUS.toString(), true)
         mappingTree.accept(nsSwitch)
         return reorderedMappings
     }
diff --git a/src/test/groovy/net/fabricmc/loom/test/unit/layeredmappings/MojangMappingLayerTest.groovy b/src/test/groovy/net/fabricmc/loom/test/unit/layeredmappings/MojangMappingLayerTest.groovy
index 9a55075bb9da5b122e51dff5e8e18f60b0783402..a03b9d05df48cb35eb8e321fbade6e3d58c0a638 100644
--- a/src/test/groovy/net/fabricmc/loom/test/unit/layeredmappings/MojangMappingLayerTest.groovy
+++ b/src/test/groovy/net/fabricmc/loom/test/unit/layeredmappings/MojangMappingLayerTest.groovy
@@ -40,7 +40,7 @@ class MojangMappingLayerTest extends LayeredMappingsSpecification {
             def tiny = getTiny(mappings)
         then:
             mappings.srcNamespace == "named"
-            mappings.dstNamespaces == ["intermediary", "official"]
+            mappings.dstNamespaces == ["calamus", "official"]
             mappings.classes.size() == 6113
             mappings.classes[0].srcName.hashCode() == 1869546970 // MojMap name, just check the hash
             mappings.classes[0].getDstName(0) == "net/minecraft/class_2354"
@@ -60,7 +60,7 @@ class MojangMappingLayerTest extends LayeredMappingsSpecification {
             def tiny = getTiny(mappings)
         then:
             mappings.srcNamespace == "named"
-            mappings.dstNamespaces == ["intermediary", "official"]
+            mappings.dstNamespaces == ["calamus", "official"]
             mappings.classes.size() == 6113
             mappings.classes[0].srcName.hashCode() == 1869546970 // MojMap name, just check the hash
             mappings.classes[0].getDstName(0) == "net/minecraft/class_2354"
diff --git a/src/test/groovy/net/fabricmc/loom/test/unit/layeredmappings/ParchmentMappingLayerTest.groovy b/src/test/groovy/net/fabricmc/loom/test/unit/layeredmappings/ParchmentMappingLayerTest.groovy
index c126c3dd941a29eb5ed047bc129c847cfe0d9c65..9f032bdbb68797575ba19f9de3e161e5f47baca3 100644
--- a/src/test/groovy/net/fabricmc/loom/test/unit/layeredmappings/ParchmentMappingLayerTest.groovy
+++ b/src/test/groovy/net/fabricmc/loom/test/unit/layeredmappings/ParchmentMappingLayerTest.groovy
@@ -45,7 +45,7 @@ class ParchmentMappingLayerTest extends LayeredMappingsSpecification {
             def reorderedMappings = reorder(mappings)
         then:
             mappings.srcNamespace == "named"
-            mappings.dstNamespaces == ["intermediary", "official"]
+            mappings.dstNamespaces == ["calamus", "official"]
             mappings.classes.size() == 5747
             mappings.classes[0].srcName.hashCode() == -1112444138 // MojMap name, just check the hash
             mappings.classes[0].getDstName(0) == "net/minecraft/class_2573"
@@ -68,7 +68,7 @@ class ParchmentMappingLayerTest extends LayeredMappingsSpecification {
             def reorderedMappings = reorder(mappings)
         then:
             mappings.srcNamespace == "named"
-            mappings.dstNamespaces == ["intermediary", "official"]
+            mappings.dstNamespaces == ["calamus", "official"]
             mappings.classes.size() == 5747
             mappings.classes[0].srcName.hashCode() == -1112444138 // MojMap name, just check the hash
             mappings.classes[0].getDstName(0) == "net/minecraft/class_2573"
diff --git a/src/test/kotlin/net/fabricmc/loom/test/kotlin/KotlinClassMetadataRemappingAnnotationVisitorTest.kt b/src/test/kotlin/net/fabricmc/loom/test/kotlin/KotlinClassMetadataRemappingAnnotationVisitorTest.kt
index 7c862b6627d8c12bbaa42df54f1fe75b2dcb0df5..2d3a07eeb24037fe550b6f2bb0e861f87e5f2d65 100644
--- a/src/test/kotlin/net/fabricmc/loom/test/kotlin/KotlinClassMetadataRemappingAnnotationVisitorTest.kt
+++ b/src/test/kotlin/net/fabricmc/loom/test/kotlin/KotlinClassMetadataRemappingAnnotationVisitorTest.kt
@@ -101,7 +101,7 @@ class KotlinClassMetadataRemappingAnnotationVisitorTest {
     private fun readMappings(name: String): IMappingProvider {
         val mappingTree = MemoryMappingTree()
         MappingReader.read(Paths.get("src/test/resources/mappings/$name.mappings"), mappingTree)
-        return TinyRemapperHelper.create(mappingTree, "named", "intermediary", false)
+        return TinyRemapperHelper.create(mappingTree, "named", "calamus", false)
     }
 
     private fun stringWriterVisitor(writer: StringWriter): ClassVisitor {
diff --git a/src/test/resources/accesswidener/expected.accesswidener b/src/test/resources/accesswidener/expected.accesswidener
index 66f55429d94c63a30be5c0e953d07926dde72228..aa4455e520f6cea7a1e2978a8562cd4801a323f4 100644
--- a/src/test/resources/accesswidener/expected.accesswidener
+++ b/src/test/resources/accesswidener/expected.accesswidener
@@ -1,4 +1,4 @@
-accessWidener	v1	intermediary
+accessWidener	v1	calamus
 accessible	method	net/minecraft/class_1928$class_4314	<init>	(Ljava/util/function/Supplier;Ljava/util/function/Function;Ljava/util/function/BiConsumer;Lnet/minecraft/class_1928$class_5199;)V
 extendable	method	net/minecraft/class_1928$class_4314	<init>	(Ljava/util/function/Supplier;Ljava/util/function/Function;Ljava/util/function/BiConsumer;Lnet/minecraft/class_1928$class_5199;)V
 accessible	class	net/minecraft/class_1928$class_5199
diff --git a/src/test/resources/mappings/PosInChunk.mappings b/src/test/resources/mappings/PosInChunk.mappings
index c6f1d3c44c50983befefd3253e126d614673391c..592453596fc306eea24c8ed054157fc786c7aaf3 100644
--- a/src/test/resources/mappings/PosInChunk.mappings
+++ b/src/test/resources/mappings/PosInChunk.mappings
@@ -1,4 +1,4 @@
-tiny	2	0	intermediary	named
+tiny	2	0	calamus	named
 c	net/minecraft/class_2338	net/minecraft/util/math/BlockPos
 	c	Represents the position of a block in a three-dimensional volume.\n\n<p>The position is integer-valued.\n\n<p>A block position may be mutable; hence, when using block positions\nobtained from other places as map keys, etc., you should call {@link\n#toImmutable()} to obtain an immutable block position.
 	f	J	field_10976	BITS_X
diff --git a/src/test/resources/mappings/TestExtensionKt.mappings b/src/test/resources/mappings/TestExtensionKt.mappings
index ca34590645cc421ff39919967dc4af26441d4284..0c2e9972f805a7ed2868a6faad316bdc752e5138 100644
--- a/src/test/resources/mappings/TestExtensionKt.mappings
+++ b/src/test/resources/mappings/TestExtensionKt.mappings
@@ -1,2 +1,2 @@
-tiny	2	0	intermediary	named
+tiny	2	0	calamus	named
 c	net/minecraft/class_1297	net/minecraft/entity/Entity
\ No newline at end of file
diff --git a/src/test/resources/projects/modJavadoc/dummyDependency/javadoc.tiny b/src/test/resources/projects/modJavadoc/dummyDependency/javadoc.tiny
index 4a9212e561fd05a8d2c3faaef76c6a15ea4afeb2..4c1221cb71aaf27236500f16fbba9e2dc5fd40e7 100644
--- a/src/test/resources/projects/modJavadoc/dummyDependency/javadoc.tiny
+++ b/src/test/resources/projects/modJavadoc/dummyDependency/javadoc.tiny
@@ -1,4 +1,4 @@
-tiny	2	0	intermediary
+tiny	2	0	calamus
 c	net/minecraft/class_2246
 	c	An example of a mod added class javadoc
 	f	Lnet/minecraft/class_2248;	field_10382
diff --git a/src/test/resources/projects/transitiveAccesswidener/dummyDependency/dummy.accesswidener b/src/test/resources/projects/transitiveAccesswidener/dummyDependency/dummy.accesswidener
index 05537ad159cc1c8eca365163e0fd7e57a47d286d..ff0bd29fbff8bbf35028d6863991447c0586f026 100644
--- a/src/test/resources/projects/transitiveAccesswidener/dummyDependency/dummy.accesswidener
+++ b/src/test/resources/projects/transitiveAccesswidener/dummyDependency/dummy.accesswidener
@@ -1,3 +1,3 @@
-accessWidener	v2	intermediary
+accessWidener	v2	calamus
 
 transitive-accessible    method    net/minecraft/class_1972    method_8775    (Ljava/lang/String;)Lnet/minecraft/class_5321;
\ No newline at end of file
